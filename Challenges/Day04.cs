namespace Challenges
{
	public class Day04
	{
		private const int ZERO_INDEX_OFFSET = 1;

		private const string Test1 = "X\r\nM\r\nA\r\nS";
		private const string Test2 = "XMAS";
		private const string Test3 = "SAMX";
		private const string Test4 = "S\r\nA\r\nM\r\nX";
		private const string Test5 = "X   \r\n M  \r\n  A \r\n   S";
		private const string Test6 = "S   \r\n A  \r\n  M \r\n   X";
		private const string Test7 = "   X\r\n  M \r\n A  \r\nS   ";
		private const string Test8 = "   S\r\n  A \r\n M  \r\nX   ";

		private const string Example1 = "MMMSXXMASM\r\nMSAMXMSMSA\r\nAMXSXMAAMM\r\nMSAMASMSMX\r\nXMASAMXAMM\r\nXXAMMXXAMA\r\nSMSMSASXSS\r\nSAXAMASAAA\r\nMAMMMXMMMM\r\nMXMXAXMASX";
		private const string Example2 = ".M.S......\r\n..A..MSMS.\r\n.M.S.MAA..\r\n..A.ASMSM.\r\n.M.S.M....\r\n..........\r\nS.S.S.S.S.\r\n.A.A.A.A..\r\nM.M.M.M.M.\r\n..........";
		private const string Data = "XMXMAXXSXSSMMMXAMXMMMAMXMAMXAMSAMXSAMXMXMMMAXXMASMSMSAMXMSMMMAMXMXAMMAMMMXMAMMMMMAMMMMSAMXMMAMXAXMXMAMXSXSMMSMMMMSMMXXAMSMSASAXMMMSMMMSMASMM\r\nMSMSMSMXMMAASAMXMASMMXSSMSSMSMMXXSAMXMXMXMSMMXMMMAAXXAAAMXSSSMAAXSXSMSASXMMSMMAAMAMXMASMSASASXMASMMSMSAMMASXAXAASAAMAMSXMAXAMAMSAXAAMASMAMAM\r\nMAAAAXXAAXXMMMSASASASAAAAAAAAAXSMSAMMMAMAMAAMMMAMMMMMSSXSAMXAMMMMAXSAXAXMMAAASXMMASMMMSXSASAXMSAAXAMAMAXSAMMSMSSSMSMMAAAMMMMMAMMASMSMAXMASAM\r\nXMSMSMSASXMAAAMMMAMAMMSMMMMXMSMAASXMASASXMSMMAMXXAMXAMXMMAXSMMMSAMXMAMSMAMSSMMAMSMSASAMAMAMAMAMSAMXMAMXMMASAMXMAXXXAXXSSMXASXXXSAMXXMAXSMXAS\r\nMMAMXXXAAAMMMSSSMMMXMAXXSXXXSAAMMMXMXSAXMAXASMSMXAMXSSXMSSMXXSXMAXSMXMAMSMAMAMMMAXSMMAMAMAMMMSMMXXASASXXSAMMSMMAMXSXMAMAXXXSXMXAAXXXSAMSMSMM\r\nASMXMSMMMXMAAAMAASMXSXSASXMMSASMMMXSAMXMMMSAMMAMMMMMMAAXAMXSMMASMMXMMSMMAMASXMXMAXXASMMXXXXAMAXSSSMSASMMMASASAMAMXMASMSXSMSMMAXMXSMMMASXAAAX\r\nMXAASXSXAAXSMSSMXMMAMAMAMMMASAMXXAAMXMAAAXMXMMAMMMAASMMMSSXSSXXMXAMSAAAXSSMSAMASXSSMSAMSSXSASMSAAAAMAMAAMMMASMMASAXXMXAAAMAMMSMMAXXASXMMSMSS\r\nXMSMSAXMMMMMAMAXAMMAMSMAMAXXSAMXMMXSASMSSSMAMMMSASMMSXSAMMAMXMSMXSAMSMSMMAXSXMASXAAAMMSAAASAMXXMSMMMASMMSMMMMASMSXSMMXMXMXASAMXMAXXASASXXAAM\r\nSMMMMXMAXMAMXMASMSAMXMMXXMSXMXMSSMMSXMAXXAMXMAAXMXXXMMMASMAMAXXAAAXXAXXASAMXXMASMMMXSMMMSMMMMMXXXXMSASXAAXMAXXMAXAXAXAXXSSMSMSMMASAASAMMMMXS\r\nXMAAXAASMSSMSAMMXAMSASXSSMSAMAMAAAAXXMMMXMMSSMXMXSMSMAMXMXXSASMMMSMMSSMASMSMXMAMAXAAXAAXAXMXAXSSMAXMASMMMSXAMSMSMAMSMMSAXAMSXAAXAXMMMAMXXAMX\r\nSSSMSMMMAAAMSASMSMMXASXAASMXXAMSXMMSMSASMSAMXMSMAAAASXSXSAXAMXXAAXMAXAMAMAAAAMMXSAMASMMSASMMSMSASXMSMXASASMMMAAMAMXMAMXMSAMXSSSMMSXMASMXXAAS\r\nAXAXAMAMMMSMSAMXAXAMSMMSMMMMSSXMSSXXAAAXAMXXMAAASMSMSXAAXMASMMSSSSMXSXMXSSMMMSMSXAMAXXAXAAAAXXSAMMMAMXXMAMAASMMMSMAMAMXXXMMMAMXAAAAMAMSMSSSM\r\nMSXMASXSMMMAMAMXMAXXXAMMAAXMAMAAMMMSSMSMSMSXMXXAMAMASMMMMSSXMAAAXMMXMMSAMASAMXMAMXMXSMSMASMMSAMXMMSASXSMAMSMMASMAMASMMXSXAXAAXXMASXMAXXXAMAX\r\nXMAMXMASMAMAMSMXXMMSSXMSMMSMAXMAMAAXMXMAAAXXASXSMXMAMAXAAMMAMMMXMASXAAMMSASMXSAMXMMXSXAMMXMMMMMMSASASAMMAMAASAMSXSASAMAMXMASXMXSXMMSMMAMMSSM\r\nSMXMAMAMMAXAMAMAMSMAMXMMAMXMSMMASMSSMMSSXMMMXXAAAXMASXMMSXSAMMSAAMXMMMMAMMSASXSMXMAMMAMSMAMMAAAMAAMAMMMMAXSMMMMSMMXSAMASAMMAMMXAMXMAMXMSXAAX\r\nMASMMMSSSSMMMASAAAMAMSMSAMSAMXSXXAAAMAAMMMXXAMSMMXSXMXXAAXSXSAMMSMAAXAMXSMSMAAXMXXSAMXMAMMXSSSSSMMMMMXMSSXMSAMXMASASAMAXASXAAMAMXXMASAAAMMMX\r\nMAMAAAAXXMAXSMSMSXSXAAXXAMASXMXAXMXSMMMSAXSMMMXAMAMAMSXASXSXMASXAMASMXSXAAXXMXSXMAMXSSSXSXAMAMAXXAMMAMAAMXSSXMASMMMSMMMSMMMSMSAMXMXAMMSAMXSA\r\nMXSSMMSSMXSXAAXMXMSMMSSSSMSMMAAMMSMMMXMMXSXAXASXMASAMSAMXAXMSAMXASXMXAXMMMMXSMSAMXMAMAMAXMMMAMAMMXMXAAMAMXMXSAMXXMMXXAAAXXAAXMAXXAMSXMXASAAM\r\nAAMASAAXXAXXMMMAXAXSXAXAAXAAXMMXAAAAMAMAMXXAMXMASAXASMAMMAMAMASXXSAMSAMXXXMXXAMXMAMXMAMMMSXMSMMSAASXMSMMMMMASXMXSXSMSSSMSMSXSAMXXSAMASXMMMSM\r\nMMSAMMSSMMSSMMMMMSMMMMSMMSSSMXSAMSSMSSMMMASMASMMMMSMMXAMXXMASXMMXMAMMMAMSAMXMSMMSASXAMSXAMMMAAXXXAXAAXAXSXXAXAXMSAAAMAAXXAAAAMAMAXAMAMXMAMAX\r\nXXMXMAXAXAAMAAMAAAAAAMAMXXMAXAAMAMAMAXXMAXXMASMAAAAAXSXSXXSXSAAMMSAMXSAMXXMAAAXXMMAMXSAMASASMSMMSSSMMMSMAAASMMMAMSMMMSMMMXXXMMAASXMMSSMSMSAS\r\nMXAMXXSAMMSSSMSMSXSMMMAXXMSSMSSSMSAMMSMMXSAMASMSMXSSMXMXXAMXMXMMASXSXMASASXMSSSXMXMMMXMAXXMMXXMAAXSAMAMMMMMXAXXSMMMSAMAMSMSMSSXMMAAAXAXAMMAM\r\nSASASMMXMXMAXXAAXAXAMSXSAMAAMMAAXSAMAAAMASXMAXXAMXMXMMXSAMMXSAXMASXMXMAMXXAAAXXAMSMMMSXMSMSSSMMMSSXMMAMAXAXSAMMMMAAMAMAMAAAAXXMASMMMSAMXMMXM\r\nMAMASXMMMMMMMMMSMSMAMAMMAMXSMMMMMSMMSSSMASMMMMSMSXSAXAMSASAAMSAMASMSASXSSSMMMSMMMAAAAAAXAXMAXAAMXMAASMSMAMAMXMAAMSSMSMSSMSMSMAAXSAMXXMSSXMAS\r\nMAMXMASAAASASASAAASXMMSSXMAXXSAMAXMAMXMMMSASMASMMASXMXASAMMMSAMMASAMASAAAXXAXMAMSXSMSXMSMSMMMSXSAMMMSAAXSAMXAASMMAMAMAMXAAXAMXXMSAMXXMAMASAM\r\nSMSASAMSSXSAMMSSXXXXMMAAAMXSASAMMSMMSXXAAMMMMXSAMAMMMMAMMMXSXMAXMSXMAMMMMMSMSSMMSXMXXAAAAAXXAAASAMAXMMMMMXSSXMAMXAMXMAAMSMSMSXSASAMXXMASAMXS\r\nXSSXMAXXMMMXMXXMXSXMMMSMMMASXSMMAAAAAASMXMAAMMSAMASAXSAMSSSXMXMXXXAMXSXSAAMMAXXAMASASMMMXMMSMMMMMSXSAMMAMAXAMXXXXXXSAXXMXAMXAAMXXAMAASXSMSXA\r\nSXMASXMMAAAAXAXMASMASAXAMXXSAXMMSSSMXXMASXSXSAXXMXMAXSAMAXXAMAXSMSAXAMAXMSSMAMMXSAMAAXSXMSXMAMXMAXMMAMSASMMMMSSXMMAXMASMSAMMMSMMSSMXXSMSAXAX\r\nSAMXSMMMSMSSMSAMXXAXMASXMAMMXMSAMXXXMXXXSAMXMASXMSMSMSAMSSSMMAMSAAAMSMSMAAXMMSAMMMMMMMXMASASAMSMSMASAMMAXMAXAMAXXAMAXXXMSAMXXAAMAMMSXSAMXMAS\r\nSAMAMAAMAXXMXXASMSSSMMMASAMMSMMMSAMXMMSMMMMXSXMAMAAMASXMAAAAAXSMSMSMXAAMMMSMMMMSXSAMXAMXSMMMXSAAXMAMXXMMMSSMMSMMSSXSSMMXSAMXSMSMASMSAMXMASAX\r\nSAMXSMMSMSSMASXMASAAMMMXXASAMAAAXMAMSAAAAXMAXAAMSMSMMMMSMSSMMSMMMMMXMSMMSAAAAMSXMSASMSSMMAAXXSMSMMSSSXMAMXAAAXXAXXAAAXXAMXMASAXMASAMXMAMMMSX\r\nSXMASAMSXAAMMSXMSMMMMMSSMAMASMMSSMAAMXSSMSSMSSMXAMXAMXXXXXAMMMAAXAAMXMAXMAMMMXSAMXMSAMXASXMXXMAMXXAAXAMXASMMMXMMSMXSSMXSXSMASMMSAMXMMSSSMAXS\r\nMAMASXMXMSSMAMXMAMSMXAAAMMSXMXAAXMMXXAXAAAAXAASAMXSMMMMSSSMSASXMMMXSAMAMSSSMMASXMAMXMXMXMXAMSMXMXMMXMMSMMMSAAXSMMMAMXAMAASMXMXAMXSASXAAMMAMS\r\nMAMMXMASAMXMXSASASASMMXSMAMXSMMXSXMAMXMAMSSMSXMXXMAMAAMAMAASASXSXMXSASMMMAAASXMSSXSAMXSXSXMASAMXSMSMAAAAXAMMMXSASXXXASXMAMSXAMXXMSAXMXSAMXSS\r\nXXSXSXMAXMMSASMSXSMAMMMMMMSAMXSAMAMSSMASAMXMXAMXMSASMXSASMMMAMAMASMSMMAAMMMMMAAAXXMASAMXSAMAMSAMXAASMSSSXMSMXMSMMAXSSMMMMAMMXMAMXMSMMAMMSMXM\r\nSXMXMAMAASAMXMASAXXAAAAMAXMAMAMASMMMAAAMAXMAXXMAMAAXMASAMAXMXMASAMMXXSMMSAXAMMMMMSSMMMSASXMAXMSSMSMSXXAMXMAMAMXXMXMSAAXSMAAAXMMXXAAXMXSAMXAS\r\nAASMSAMSMMASXMAMMMSSSMXMSMMMMXSMMMXSAMMXXMASXMMSSMSMMXMMMSMSXSAMAXSXAMMSMMSMXAAXAMASAAMXSXSMSSMSXMMMMMMMMSASMSSXSMXSXMMXSASMMSAAMSMSMAXMMSXS\r\nMXMAMSMXXSAMXMASAAXAAAMSMSAAAMXMASASAMXSSMMXAMAMAXMAMSASMXAAMMASMMSMMAXAAAAMSSMMMSAMMMSXMASMMXAMMSAAAASAAMASAAXAMXXSSSXAMXAAAMMMMAAAMXMSAMMS\r\nSMMMMXXSAMASXSXSMSSSMMMAAMMMSAAMSMMSXMAAAXASAMXSMMSAMXAMXMAMXSAMAAXAXSSSSMMXAMXSAMAMXXMAMAMAMMAMASMXSMSAXSXMMMMMMSSMAXMXSMMMMSXMSMSMSAAMXSAX\r\nAXAAMXAMMMASMMASAXAMMXSMSMSXXXSMXXXMXMSSMMXSMMXAMAMASMXMMXAXXMASMMSSMAAAAASMMSAMASMMSSSMMSSSMSAMXMXMXASMMMASXSXSAMXMAMSMMAXSAXAXSAAAMMSMAMMS\r\nMSXSMMSMXMXMAMAMMMAMMXMAXAMXSAMXMMMXAMMAMXMSMMAXMAMMMXMAMSSSMSMMMAMMAAMMXAMXXMASXMXAXAAMXXAAASXSAMASMAMMAXMMMAAMMXMMSSXAMSAMXSMMSXMXMXMAAXXS\r\nXMMMAAMMSXSMSMASXXMMXXMAMAMAMAMASXSSSSMMMAXMASMAXXXXAMMAMMASAASXMASXSAXXXSSSXSAMMMMSMSMMSMSMMXASXSAMMAMMAXSASMSMSXMAXAXSMXAXXAMXXASXSXXSXSMM\r\nXXASMMSMSAMAMMMAMXSAMXMASAMXSASXSMXAAAMSSMMSAMXSMMXMASXSMMAMXMSXXASAMAXSAAAAMMMXAAAMMXXAAXAMXMMMMMMMSASMMXSASXMASAMMSAXMASMMSMMMSMMASAMXMMMX\r\nXSMSAAAASXMAMASAXMAAMXMASAMXMMXAMXMMMMMAAMAMAMAMAASMXMAMAMXMSSMMSMMXAAMMMMMMMAMMSMSSMMMXSSMSSMAAXXAMXASXMAMMMAMAMMSAAMXMMAMASAAMSAMXMXMSMAAX\r\nMMAMXSMMMSMXXAMXSASMSAMMMAXSMSXSMXAAASMSSMASAMASMMMMAMAMXSAMSASAAXXSMXSXXSAMMMSAMXMXXASMMMXMXSXXMMMSMSMMMMMASMMXSASMXSAMSAMAMMMXMAMAMAXXMMSM\r\nXMAMXAMASMSSMSSMSXMASMSSSSMMAAAAASAMXSAXAMXSASXSXASXMMSMMMAMSAMSSSXXAAAMASAMXAMAXSAMXXXAAXASMXMSMSXAXMASAMSASMAXMASAAXAMMAMMSMSMMXSSSMMSMXMM\r\nXMASMXXMASASAAMAXAMXMAAXXAAMXMMMASXMXMAMMAXSMMXXMASAXAXAAXAMMXMAXAASMMSMASAMMMSAMXAMMMSSMSMSAMXAAXAAMSXMAMMAMMXMMAMMMSXMMAMXAXMASXXMAAAASAAA\r\nMSXMMMXXMMSMMMXMSSMSMMMSMSSMAMXSAMASXMMAXXMXMXMMAMXMMXXSMSSSSSMSSMAMAAXMASAMXMMXSMMASMAMAMAXMAMMXMMMAASMXMSMMMXSMXSAAAMAXXMMSSXSMXASXMMASMSM\r\nMAXSAMSMXXAMMSAMMMASXMXXMAXMASAMASAAXMAMXAMMSAASXMMAASMXAAAXAAAAAXASMMSMXSAMXSAXMASAMMAMAMXMXSAMXMSASMMMMXAAAAMSXMMMXSAAMSSMMSXAXSXMXSXMXAXX\r\nMMMSASAXASXSAXMSMMAMAMSAMSSMMMMMMMMMAMASMMXASAMAAASMMMASXMMMSMMMSSMMXAMXAMASAMMMSAMASXMSMXXXMMXSAAAMXXMAMSSSMSXSASXSAMMASAAAASMSMSAMXMAXSXMM\r\nAAAXXMMMMSAMMXMAXMASAMXMXAMAAASASXSXSMASMSMXSMMMSMMAXMAMAXXXAXMXAMXSMMXMXSAMXSAAMXXAMXAAAAMMSAASMMMXXXMAXXAMXXASAMAMXSXMMXXMMSAMMMAAASAMMAXX\r\nSMXXAXXAAXXASASXXSAMASMXMSSSXXXASAMAXXMSAMXXXAMXMXSMMMAMAMXSXSAMMMASASAMXMASXSMSMSMSSMSMSXSAAMMSXSAMSASXXMAMAXMMSMXMASAMXSMSMMXMASXSASAASAMX\r\nMAXSXSSMSSXMSASAXMASXMMAAAXMXSMMMMMAMAAMAMSMSMSASMXSXXSMMMMSXMXSXMASAMMMMSAMASAXASXMAMXXAMXXXSXMXMAMSMMXASXMXXXAAMAMASAMAXMAAXASASAMAXMMAMSM\r\nMSMMAMMMMMAMXAMXMMMMMASMMMSMAMAAAMMSSXMSAMAAAAXASAMAMAXAMMMSAMAMXMAMXMSAMMXSAMAMAMXSMMMMMMMXXMASAMAMMAMXAMAMMMMSMXAMXMAMMSMSXMMMMMXMMMXMAXAM\r\nAXAMAMAAASMMMXMXSASAMXMASXAMMSAMXSAMXAXSMSMMMSMXMMAMMASAMAASAMXMMAMMSAXSAAMXAMXMXMXSSXMASAMXMXXMASXSMASAXSAMAMXMASMSMSAMXSMXASXXMXAMXMXSMSSM\r\nMSASMXMMXXAASXMAXASXSMXAMSAMXXXXXMMSSSMSAAXSAMXAMXSXMASXMMXMAMASAAASMAXMMMSSSMASAMXMAMSASXSSMSSSMMAMMAMXMSMSXSAMAMXAMSMMMXAMAAAASMSMASAXAAAA\r\nMMXMMAMSSSSMMAMAMMMMXMMMXAMXXXMSMAMAAAAMSMXMASMMXAMAMASAMSSSMMXAMSMXXMASAMXAASASAMAAMMMXMMMXMAAXAAMSMMSAMXAAASASXXMMMXMAAMMMSMMMSAAAXMMSMSSM\r\nSSXMMSMAAAMMSXMAMAAXXAXMAMSXSAAASAMMSMMAAMASXMAXMMMAMASAMAAAXMMMXXMMAXMSASMSMMMMXSSSXXXXSAMAMMSMSSXSAAXASMMMMSMMXXAMMAMSSMSAMXXAMXMMMMXAMXAX\r\nSAASAAXMSMSAMASXSSSMSMXSAMMAMMSMSSSXAMMSXXASASAMXXXAMXXAMMXMAMXXXSASMXMSAMAAMSMMAMXAAMSMASMMSAXMAMASMMMSMMXSMMAAXSXMMMXAAXMASXMMAMXAXXMXSMMM\r\nMSMMASXXAAMASAMMAMXAAXAMASMAMAXXXXXXMSXMSMXSMMXSAAXSMMSAMXASXSMSASAMXXMMAMMMXAMXSMMMMMAAMAMAXXSMXMXMAMMMAMXMASMMMMMSAMMXSMSAMXXSAXSMSMSMSAXA\r\nMXMAMMXMMSMAMASXSMMAMMMSAMXMMMSMMMMSMXAAXXMXMSAMMSMMAASMMXMAAAAMASASXSXAXSMSMSSMMASXSXMSSSMMMXXMAMASAMAMAMASAMXSAAAXAMAAXAMXSXMMAXXAAAAASXSS\r\nXSMSMXXMAXMXSMMMASAXMAMMXSXXSMAXAAAAXXMAMMMAXMASAXAMXMSMSAMMAMXMAMXMASMMMSASAMMASAMAMSXAAAMXXAXAXSASMXXMAMXMASXSMSMSSMMMMAMMMMMXXMMMMSMMMAMX\r\nMXAAXAMMMSMAMAAAMXXMXAXMASASASASXSSMSMSASASMMSAMASAMXXSASXSXMMAMXSAMMMAMAMMMAMMAMMMAMAXMSMMMMSAMMMXSMASMXMAXSAMXAXMAXMXSMSMAMXSAMXXSAMXSMSMS\r\nASXXMMMAMAMXSSMSXMAMSASMAMXSAMXSMMAXMAAASMSAAMASXMASXAMXMAMAASXSAXAMXXSMSSXSXMMMSMSXSXMXAMASAMXXASMMMASAMXSMAMMMSSMMSMMSAAXXSAXASAMXASAXAMAA\r\nMXMAXMAXMMXMMAMMXMSMAAAMSMAMMMAXASAMMXMMMXMXMXMAXSSMXXSMMAMSMMAMMSSMAMMXMMASMSMAAAAAMMSSXSAMMSMSMSASMAXASAXMAAMAMAMXSAAMSMMSMMSXMASMSMMMSMXM\r\nSASAMSSSXXAXSAMXAAMMMXMAXMAMAMMSXMMAXMSXAXMAXMAAXMAMXMMMMAXAAMSMMAAMMMSAAMSMAAMSMSMSMAAMXMASMSXMASAMMXSAMASMSSMASMMXSMMMAMXXAAMMSMMMXMXAXMAS\r\nXAXAXMAAASAMSXSXMMSAXASMMSASXSAMMAMSMMMASMSAMMMXSMAMMSAAXSSMSMXAMMMSAASMMXXMXMMAAXAMMMMSAMXMXSAMAMXMAXMXMAMMMAXASXMASAMSXSMXSMMAAAMXSMMMXSAS\r\nMSMMMMMMMASMSMSXSAMASMMAAXASAMAMXSXMAAAXMAXXMSAMXMXMXMSXSAMXMMSAMAASMMSASMSMMMMMSMAMAAMMASAMASXMASMMMSAAXXAMSMMMSAMXSAMMMAXAXAMSXSMAAXAAXMAS\r\nMXAAXXMSXMASXASAMXSXMXMMMMSMMSSMAMASXSXSMXMMMAMAMMMSMMAMXXSXMAMMMMMSMAMASAAAASXMXMSMMMMMMMMMAMAXAMAASMMMSSMAAAAASAMMXMMMASMMXAMMAXMASXMSSMAM\r\nSSXMASXMASMMMMMXMAAAMXSXSXMAMAXMAMXMAAASXSMSAASAXAAAMMMXSSMMMSSSSSSXMASMMXMSMSAAXSXXMAAASAMSSMSMMSSMMAAMAAMSSSMMSAMXMSAMXMAMSAMXAMAMXAAMAMAM\r\nASMXXXASXMAAAMAXMMSSMSXASXSAMASMMSMMMMMMAMASMMSASMSSSXMAXAASAMXAAXSASASXAXMAXMMMSMMSSMSMMAXAXAXAMAMAMMMMMXXAAAMASAMXASASASMMAMSMMMSSXMSSSXSS\r\nMXSXXMASMMMSXSXXAAAAXSMMMAXXMASAMSXMASAMAMXMAXSXMAXAMAMSMSMMMSMMMMMXMAMMSSMAMXSXAXAAAXMASXMMXXMAMSSSMSXAMSMMSMMAMXSMASMMASMMMAAAXAAAXXXAAAMX\r\nXXMMAMXXAMAXXAMSMMSSMSMSASMMSASXMXAXASASMSMSMMXAMXMAMMMXAXXMXAMAAASASXXAAXXAXXMSMSMSSMMAMXAXXSSXMAAAXSXSMXAXAMMMSAXMAMAMAMAMXSSSMMSSMMMMMMMA\r\nMSMSMAAMMSMSAMXMAMXMAMAAAMXAMAMASXSMXXAMMAMAAMMAMXXSMSMSXMASMMSSXMSAMAMMSSMMMXAAXAMAMXMSSSSMXMAMXMSMMMAXMMMMMXAMMXMMASMMMMSMAXAMAMAMXSMMSSMM\r\nSAAAMMSSMAASMXXSMSASMMXMMMMSMAMMMAXAMMAMSASXSMSXSMSXAAASAXAXMAXXSAMXMSMMAXAASXMMSMXAXSXMAAXMASAMAXAMAMSMMSASXMXSASXMMMAASXMMSSMSAMAAXMAXAAAA\r\nSMXMXAAAMMMMXAAMAMASXXXAAXAXSMMSMAMAMSSMSXSAMXSAAXSMSMMSAMSMSMXAAXXAMAAMMSMXMAAXXXXMMSAMMMMSASASXSAMSXXAAMXMAMAMXMAMMSSMMAAXXAXSXSMSMMMMSSMM\r\nMMSSMMSSMSXSMXSMAMMMAMSXMMXMAXAXMSMAMXAAMASXMASMMMXAAAXMXMAAAXMMMMSMXSSMXXMAXMMMXMASAXAMSXAMAXXXXAXAXAMMMSASAMSSMSSMAMMASXMMXAMXAXMAAAXXXAAX\r\nMAAASXXXAAAXMAXMXMAMAMXAXASMMMXMSASAXSMMMAMXMXXMXXMSMSMSSMXSMSAXAMXAAMAMXMMSAXSAMXAXASXMMMAMSMSMMXSMMXMAAAAMXSAAMAMMAMMAMMAAXXXMXMMSMMSMAMMM\r\nMMSXMXMMSMMMSXMSSMASMMSMMSMAAAMXXMXXMSASMXSSSSMSSMAXAMXAASXXMAXSASMMMSAMXSAMXXXSXMMXXMAAXXAAAMAAAAAAASMSSMXXMAXXMASXMMMMSSMASMAMXSAAMXSXXMAX\r\nSAXXXXXAXASAXAXXASXXMASXMASXMSMSSSXSASAMXAAAMAMAAXAMAMMMSMMAAAAMAMAMASMMXMAMXSAMXMMSSMSXMSMXXSSMMSSSMSAMXXXMASMMSASAMXSXMXXAAXAMSMSXSSMMSSXS\r\nAAMSMSMSSSMMSMMSMMMSMAMASASMXAAXAXAMMMXMMXMMXAMSSMMSAMMSXMSSMASMSXSMAMASXMSMMXAXAXAAAXAAXXMSAMXSAAAAAXMXXAAMAXSAMASXMAAAXAMSMMMMAXAMSASAXMAM\r\nMXMAAAAASXAAAAMXXAAAMMSMMMSMSMSMMMXMAXXMAMXXSXXXAXASXSMAXMAMMXAXMAXMMSAMXAAAXSMMMMMSXMMSAAXMMMAAMMMMMMSMSSMMMXMXMMXAMXSSMSXXAXSMSMMXMAMMSXAS\r\nSSSMSMSMMXMMXMMASMSXSAAAAXXMASXMXXMASMSMSAAMAXMSMMMSSXMASMXSAMMXMXMAXMASXXSAMMXAAAMMXSXMMMMMSMMSXSXASAAAMAAASMSMSMSAMAMXMXAXXAMAXAMAMSMMSMMA\r\nXAAXXMAMSXSSMXMAXMAXMXSMMXXMXXMXSXMAXAXAXMXSXAMAMAXXMXMASXMAMSXSMMMAMMSMXMXMASMMSSSMAMAXXMAXXAXAAMSXMXSXSXSMMXAAAAMAMMSAXMAMSXMAMMSXMMAMXASM\r\nMSMMSXMASAAASXMXMMSSMMXAMSXSMASAMXMASAMMMXMMAMXSSSSSMAAAXAXAXXAAAASAMXXAMXXSXMAMXXAMAXMMXSMSMSMMXMSXSAMASAXMSSMMMMSAMXSASXMMXAMXSAMXMXAMXAMX\r\nMAAXXXMASMSMMXXMXAAAAASAMAAASXMASMMASAMAAXAXAMXAAMAAAMMMSAMMSMSMSMSMSSMAMSAMSMSAAXMMMSMAXSASAAAXAMXMMAMAMXMXAASAXXSMSMXMMMSASXMMMXXMAXSSMMAS\r\nSSMXMXMASMMASMSMMAMMMMXMMMSMSXMAMXMASASXSSXMASXMMMSMMAAXMXMASAAXXAXAAXMAMMAMASAMXSSSMAMMMMAMSMXSXSAXMMMSMSMMMSSXSASAMXASAAMXSAAXAMMAMSMAMMAA\r\nAAAXAXMASASAMXAAAAMSSXSAMXXAXMXSAXMASXMXAAASAMASXAAXXMMMSAMXMXMXMMMMMSXXXSXMXSMXAAAASMSSSMMMMXAXASXSMMMXAMMAMAMMMXMASXXSMMMASMMMAXAASAMAMMMM\r\nSAMSSMMAMMMXMXSMMASAASXMMMMXMMXMAMSAXASAMXMAASAMMSMXMAAAMASXSXSXAXXXAXXMXSXMXXXXSMSMMSXMAXAXMAXMXMMAMAAMAMXAMMSXAAXAMXMMXMSXXAXSSSSMSAMMXASM\r\nAAMAXAMSSSMMSXAXXXMMMMMAAXASASASMXMMSMMMXAXSAMXSXAAASMMMSAMAMAMXMASMSSMMAMASXMMXXAMAXXMASMSSMAXXAXXAXMMSAMXXMAXMMMMASAXMAMAMSMMMMAXXXMMSSXSX\r\nSMMASXSAAXAAASMSXSXSXAXXSSXXASASAMMAAAAXSSMXXSXMXMSMMAAMMXMXMXMAXSXAMMAMXMMMAAMXMMMMMMSAMXXAMAXSASMMSSXSASAAASXSXAXSSMXMAXAAAMAMMMMSMSMXAXMX\r\nMAMAMMMMSMMSAAXMASAMMXSAMXXMAMAMMAMSSSMXMMMAMMMSAMAMXSXSXSAASMSMXAMMMSSMXMASMMMASASXAXMASXSMMMXAXMXSAMXSAMMSMAASXMXMXXASXSMSXXAXAAXXAAAMXMXA\r\nMAMASXAXMXMAMXAMXMMMAAXASAMXXMXMXSXXXAMXAASAAAAXMSASXMASXMSASAAMXSAMAXAAXSAMAAXXSASXMSMAMAAXMSMMSSXMXMAMAMAAMMAMASMMAMMXAAAXMSSSXSXMMMXMASXM\r\nSXSASMSMSASMXSSMAMXMSSXXMAXMAMXMXMXXMAMMMMMASMXSXSAMXMAMXMXXMXMSAMAMSSMMMSASMMSAMXMMMAMAASMMMAAXAMXXAMSSXSSSSMMSAXAXMSSMSMMMXAMXMMMSAMASAMAX\r\nMAMASXMASASXAXMASAXMAMXAMXMXSMMMASAMMSASAAXXMXMAAMXSXMASXMMMXAXMXSXMAXMAAMAXXSAMXXXSSXSXXMAXSSSMAMMMSSMAAMXMAAMMMSMMAAMMXASMMMSAMXAMASXMXSXM\r\nMSMAMMMXMAMMSSMAMASMASASXXSAXAXSAMAXMAAAMMMMAXXSXSAMASASAMAAXXMSMMASMASMMMXMMSMMMMMMSXAXMSSMMAXXAMMAMAMMMMASXMMAASAAMMSSSXMAAASASMSMAMXAXSAS\r\nAAAAMMMAMAMMXAMXSXMMMXAXAXMAMMMSXSMMSMAMXMAMAMXMAMXSAMXSAMXSAMXSASXMXMXASMMSAMXMAAMSMSMXMAMAMXMMMSMXSXMXSSXMAMSMMXXMSAAXMASXMMSAMAXMMMMXMSAM\r\nSSSMMSSSXXMXSSMAMXSXMMSMMMMAMMMSASMMXXSXMSXSAXAMAMAMASAMXSAAMAMSAMMXMAXAMXAMXSASMXMAAXXMMXMSMMMASAMXMASAMXMASXSMSMSMMMSSMASMSMXMMXMSAMAAAMXM\r\nMAMAXXAMXSMAMAMXMAXAXAAAXAMMSAAMAMXMAMXAMMMXMSMSMSXSAMXMASMMMSAMAMSMSASMAMSMAMMSAASMMMMMSAMMAMXMSASMSAMASMXMXAMAAMAAAAAAMASXAMAMMXMXAMSXSXSX\r\nSAMSMMAMAXAASMMSASXSMSSMXXXASMSMMMAMMMMMMAMAAXXAMMAMXSXMAMAAXXSSMMAAAXAMAAXMASASXMMAAMMAMAXMAMSXSXMAAMSXMAMSMAMSMSXSMMSSMMMXMSMXSASMSMXAXXMM\r\nSXMXASMMMSSMXXASAMXXAXMMSSMMMXMMAXASASAXSAMASMSMSXSMAXXMSSSMSAMXMXMSMAMSSXXSAMAMAXSSMSMXSMMASASASAMSMASAMXAXMAMMASAAXXXAAXXSXSAASAMAXMMXMASA\r\nMASXMMMAMMXSXMAXXSMMXMMAAAAASAMSSSMSASMMSXXMAMXMAXAMXSAAXXMMXASXXMAAXMXMAXMAXMMSAMXXAXMMMMSAMASASXMXMASASASXMXSMAMSMMXMSMMSAAXMMMMMMAMAMSAMS\r\nSAMXMAMAXMASXMXMSAAMASMMMSMMXAMAXAAMAMXMXMAXSAMXSXMXSAMXXMAMSAMAASMSMXAMXMMAMAXMMXSASXAAAAXXMAMAMXMXMXSAMAMSSXMMXXMMMMAMAMAMAMXXAXMSAMAXMASX\r\nXMAMSASXSMASMXAMSMMSASAAMMASMXMMSMMMAMAAAAXAAAXAMMXMXXXSMSAMMSMMAMAAMSXMAAMMMXMAMAMMMMXMAXXXMAMMMAXMXXMXMAAMSAMMMXXAMXAMAMMXXAMSXSASASXSAMAA\r\nXMAMMASAAMAMMMSXMXAMASMMXSASMMMMAAASAMSSXSXMSSMAMSAMAXMSAMASMXXMAMMMXMASMMMSSXSXMAXAAXXMSMSMSMSSSXSXMMMXSMSASXMAMMMSSMSSSMXSXSXSAAXSXMAAASMA\r\nMMMMMAMMMMXXXAXASXMMMMAMMMAMAAMMSSMSMXMMAXXMAMMSXSASXSMMXMXMMXXMMMSXAXMASAMAMXAXSMSSSMSAXAAXXSAMXSMXMAAAXXMASASASMXMAMMAMMAMMMSSMMMXAMXMAXXM\r\nMAAXXXMASXSMMASAMMAMXMSMAMAMSXSAXMMMXAAMXMSMASAMASAMASXASMXSAMXMAAASMMSAMXMAMAXAMAAAAAMAMSMSSXXAMXMMMASMSMMMMXSAMMXXAMMAMMAMAXASAASXSMSSMMAS\r\nSSSSXAMASAMXMAMXMASXSXMSXSAMXAXMXAAXSMXMAMASXMMMAMAMAMMASMASAASXMXMXSAMXMASXSSMSMMMSMXMXAASXAAMSSMXSMXXASAAAXAMMMAMMMMXASXSSSSMSSMXAAAMAASAM\r\nAAAMMXMXMAMAAXXMAAAAXAXAMAMXMMMXSXMMSAXMMSAXXAMMASMMSXMSSMAMMXXAMXXAMXMAXMSXMXAXXMMMMAMXSMSXMAMAAAAMMXMAMSMSMASAMXSAMMSMMAMAXAXMAXMSMAMSMMAS\r\nMMMMSSMMSMSSSMMASXMXMMMSMSASAXMAXASMMSMAXMXSMSMMAXAAMXMMMMASMASXMXMAMSSSSSMAMMSMMXXMASMMMXXMXSMSXMMSAMMXMAXXAASAXASASMAAMSMSMMXSAMXXMAMXXXMM\r\nXXXXAAXASAAAAXAXXASAMXMXAXXSMAXSSXMAAXMXMAMXAAMMSSMMSASMASAXMAMSAASAMXAAXASXMXXAMMMMAAAAXAMSAMXXXAAMMSAXXAMXSASMMXMAMXMMMXAXMXMSAMXAXMASMSMM\r\nSSSMSXMXSMMSMMSXSAMMXMSMMMASXSXMAMSMMMMMMAMSMMAAAAAASXXSAMAMMAMASMXAXMAMSMMMMMSXMAAMXSMMMMMMASASXMMSXMASMASMMAMAMXMSXSXSAMXMXSAXMMSXMXMASAAM\r\nMAMAMASMXXAMXMXMMMMMMAAAAMAMAXMMAMXXAAAAXAXXAXMMXSMMSAMMXSASMASMMMSSMSMXAXAXMAAASXMSAMXSXSAXMMASASAXMAAXMAMXXMSMMASAAAASMSAAAXSSXMXSMXMSXSMM\r\nMMMMSAMAXMAXAMXAXAAAMSSSMMMMAMMMSSXSSSSSSSMSAMXAAMMXMAMAXMAMXAMXXAAMMSASMSSXXMSXMAXMXSXMASXSAMXMAMXSAMSSMXSXMMAMSMSMSMXMAXMMMAXXXMAXMAXXAAMX\r\nSXSAMAMMAXMSASMASMSMXAAAXXAMXSXAMAAXAAAMMAMXXMMSSMASXMMMSMAMMMSMMMMSAXMXXAMMSMMMSMMMMMMMAMSAXASMAMMAXAAAXMAMAMAXAMSMMXXMAMXAMAMXXMMSSMSMSMXS\r\nAAXMMMSXMAMSMSMAAMAMMMSMMSMSXMMASMXMMMMSMSASAXMMMXXMAXAMAMASASAMXXSMMXXXMXMXAAAMASAXAMXMXSXXMAXSAMAAXMSSMAASXSSSSXMAMAMSAMXSXASAXSAAAMXAXXAA\r\nMMMSAAMASXMXAXMXMMAMAMMXXAMAXXMXAMXMSXXSAMASMSMAMSXSXMSSSXXSMSXMAMMAXSMMSASMSSMSASMSMSAMXMMMMMMMMSSMMAAMAMASXAMAMMSAMAASXSAXSXAMAMMSSMMSMMMS\r\nXMAXMMXAMXMMMMAXSSMSXMAMSMSAMMSMMSMAAAAMAMMMXXMAMMAMXXMAMSMXASMSSXSAMAAXSAMAMXXMASAAXSMMASASAMXSAXAAXMAXSAASMSMAMASMSMMMASAMMMMMMXXAXXXMXSAM\r\nMMMSASMXMAMAXMAXXAXXAMAMSXMASASAAAXSSSMXXMSXMASXSXSMSMMAMAXMSMAAAXSSSXMMMMMSMSAMXMMMMXASASXXASAMXSSMMXMAMMMMAMSMSMMASMAMMMSMAAXXSMSSMMAMAXAM\r\nXAXMAMMSXSXSSMSASMMSXMASXASXMAMMXMXMAAMXSXSAMXMMAMAAAASXSMSMAMMMSMSASAMMXMXMASXXAXMXXMAMASMSMMMAXXAAMSMSXAMMMAAXXAMAMMASXAXSSSMMSAAAMSAMSSMM\r\nMMSMSMXMMMAAXAAAMXMSMSMSMXMXMAMSMSAMSMMXAAMSMAAAMXMSMXMMSAMXXXXXXXMAMMMXAMSMXMMMMSMASMMMMMAAMASMMSMSMAAXSMSSSMSXSAMXXXXXMSMXMAMAMMSMMMASAAMX\r\nXAAAAXAXASMMMSMSMSMXXAXMAMMXSAMXASMXAXAMMXMXSMMMXXMXMASASMSMMMSAMMMMMAMXXSAMSXSAMAMAXAXAAMSMSASAAXAMMMMMAMSXSXAASXMASMSMAAASMMMXSXMMSMMMMSMX\r\nXSMSMSSMXSAAMXAAASMMSSSMSMXXAXXMMMXSMSSXAAMMMMSSMMMASAXAMAAAXAMMSAAASASMMMAXAAXMMAXMXSMSSXMAMXSMMMSMAAMSSMMASMMMMASASAAXSSXMAASAMXSASASMSMXX\r\nMMAXAAMMMSAMAMSMSMAAAXXAAASXMMSAAMXSXAMMSXXAAAMAAMSXSMMSMSMSMXSASMMXSASMASMMMSMSXSMSAMMAMAMAMASAXXMXXMXAMAMMMMAAXMMAMXMMAXXSXMMASMMASAMXAAXX\r\nAMSMMMSMAMAMMAMXAXMMSSMMMXMAXAXXXSAMMMSMAMMSMSMSMMXAXAAXAXMMXMMASXSXMXMMAMXAXAAXAXAMXXMASAMAMXSXSXXASXMMSAMAASMSSMMAMMMSMMAXAXSAMAMAMXMSMSMS\r\nXSAMXMAMMSMMXXXSMMSXMAAASXSSMMSSMMASXXAMASAXAMMXXSMMSMMSAMASMMMAMXAXSAMMMSSSMXSMXMASMASASXSASMSASMMXSAAXSASMMMAXAASXMMAAXAMSSMMMSAMXMAXAAAAX\r\nSXMXMMMSASAMAAMAAASASASMSAMAAXAAMSMMMMXMAMXMSMASAXAMXMAMXSXMAMMMSSMASXXAMXAXAXMMSXAXXXMASXSXSAMAMXMMSXMMSAMMSMMMSMMAMMSSSSXAMAAASASXSSMMSMSM\r\nXXMASXXMMSAMXXAMMMXAMAXXMAXSSMSMMAAASASMXXAMXMASMSSMASMSASASXMXMAAXMXMXSSMSMSMSAMMMSMMSASMMMMAMAMASXMSMAXASAMAXAXAMXMAAAMMMXSSMXSAMMAAAXXMAX\r\nXXMAXAASXSMXMASXAXMSMMMXSMMXXAXASMSSMASAMSSMAXXMASMMXSAMASAMASAMXSSXMASMAAMAAAMMSAAAAXMAXXAASMSMMAMAAAMAXAMASMMMSSMAMSXMXSMAMAXXMMMMSMMMAXAX\r\nSAMASXXMAXSAXMAXXXMMAMXMAMMMMMMAAAXAMAMXMAMMSXSAMXMMMMMMAMXMAMXMAAMAXSASMMMMMSMAMMSXSXMMMSSXSXAMMSSMSMSMMSMMMAAASMSAXMASAAMSSXMXMASAMAXXXMXS\r\nAXMAMXAMAMSMSSSMSMMSAMMSXSAAASMSMMMMMXSAMXSAMXSAMSSXAXAXSMSSSMSMSXXAMMMMXXAMXAMXSMMAXXMAMAMXSMMMAAAAMAAXXMASXMMMSASXAMAMXMAAXMXAXAXASXMSSMXS\r\nMSMXSSSMMXSSMAAAMAASASXMASMMSAAAXSAXAMSXSAMXSASAMAASXMMSAAAXAAAAAAMSSSXSXSSSSXSMAASMMMSAMASASASMMXMMMSMSXSAMXAMXMAMMSMAMSMSSMXMMMSXMMXMXAAAM\r\nXAMXMMASXXMAMMMMMMMSMMAMXMXSMMMMMMXMAMXXSAMXMASXMAMMXMXSMMMSMMXMAXSAAAXMMMXAAAXXMAMAAAXAMMMASAMXMASXMMAMAMAMASASMXMAMXSMXMMAAMAAAMSMAXXXMMMS\r\nSXSAASAMMXMAMXXMXSAXMSASAMXAMXAASXXXSMMMSASAMMMMXXMAXSAMXAAXASXAXXAMXMMMASMMMSMMXSSSMSSSMAMXMAMASASAAMAMAXAMMAMAAMMASAXXAXXXMAXMXMAMXMMMMAAX\r\nASMMXMAAMSSMXMSAASASXSASMSAMXSSXSASXMMAXXAMXMMAMXXMMMSAMXMMXXMASXMXMAMASMSXAAAASAMXMMXAMMAMAXMXMMASMMSXMMMSSSMXMXSMAMAMSMSXMASXMSSMMMAAASMSX\r\nSXXSXSSMMAASASMMMSAMAMAMASASAXXAMAMAMSSSMMMSMSAMASXAAMAMXSXSAMAMAXXSASXSASMSXSSMASAMMMAMMXSSSMAMMMMXASMSMMXAXXAXXXAAMMMASAMXAMAAXAXMSSSXSSXM\r\nMAXSAMXXMSAMXSASMMAMXMXMASAMASMMMAMSMMAXMAAAAMAXAMMMSSXMXAAAMMSSXMASXSXMAMXMMMAMAMASASMMSMAAXMAXAXXMMSAAXSMMMSMSMMSXXASXSMSSMSSXXMMMAAXMXMXA\r\nMMMXAMXXAMASXSAMXSSMAMXMAMAMAXAASAXMAMXMSMSSSSSMXSAXMAXSAMXMMAMXMAXMAMXMMSMMASAMXSAMXSAAAMMMMSMSSSMAMMMMXMASAMASAMMMSMSAXMAXMAMAMMAMMSMMSMMM\r\nAAASXMASXSMMAMMMXAXMASAMASAMXSSMSMXSAMMAXAAAAAAAASAXSAXMAXXSMXSAMSAXAXXSAMASMSXSAMXSAMXSXSMXXXXAAAXSMXXXASMMSAASMMAAAAMMMMASMAMAXSAXSAASAAAX\r\nSXXAMMAXMAMMXMXMASASMSASMSXSAMAMXAMSAMXSSMASMSMMMXSAMXSSMMAXSXSASXMSAMXXMMMAMXXMXXSAMXMMMXXMASMMSMMMMSAMXSMAXMASXSMSSSMXXAMMXASMXAMXSASXSSMS";

		[TestCase(Example1, 18)]
		[TestCase(Data, 2434)]
		public void QuestionA(string data, int expected)
		{
			int matches = 0;

			string[] rows = data.Split("\r\n");

			char[,] grid = InitializeGrid(rows);
			PopulateGrid(grid, rows);

			//// For debugging -- pretty format the data
			//for (int row = 0; row < grid.GetLength(1); row++)
			//{
			//	for (int column = 0; column < grid.GetLength(0); column++)
			//	{
			//		char letter = grid[column, row];
			//		Console.Write(letter);
			//	}
			//	Console.WriteLine();
			//}

			//Console.WriteLine();

			matches += CountWordMatches(grid, "XMAS", false);

			Console.WriteLine();

			Console.WriteLine("Total # of Matches: " + matches);
			Assert.That(matches, Is.EqualTo(expected));
		}

		private static char[,] InitializeGrid(string[] data)
		{
			int rows = data.Length;
			int columns = data[0].Length;

			return new char[columns, rows];
		}

		private static void PopulateGrid(char[,] grid, string[] data)
		{
			for (int column = 0; column < data[0].Length; ++column)
			{
				for (int row = 0; row < data.Length; ++row)
				{
					grid[column,row] = data[row][column]; // The reference of a multi-dimensional array in the debugger is reversed so I'm aligning the data to make it easier to grok
				}
			}
		}

		private static int CountWordMatches(char[,] grid, string wordToMatch, bool caseSensitive)
		{
			int matches = 0;

			List<char> firstCharacters = DetermineFirstLetters(wordToMatch, caseSensitive);

			for (int row = 0; row < grid.GetLength(1); row++)
			{
				for (int column = 0; column < grid.GetLength(0); column++)
				{
					char letter = grid[column, row];
					if (firstCharacters.Contains(letter))
					{
						if (MatchLeft(grid, row, column, wordToMatch, caseSensitive))
						{
							Console.WriteLine("row {0}, col {1} LEFT", row + 1, column + 1);
							++matches;
						}
						if (MatchRight(grid, row, column, wordToMatch, caseSensitive))
						{
							Console.WriteLine("row {0}, col {1} RIGHT", column + 1, row + 1);
							++matches;
						}
						if (MatchUp(grid, row, column, wordToMatch, caseSensitive))
						{
							Console.WriteLine("row {0}, col {1} UP", column + 1, row + 1);
							++matches;
						}
						if (MatchDown(grid, row, column, wordToMatch, caseSensitive))
						{
							Console.WriteLine("row {0}, col {1} DOWN", column + 1, row + 1);
							++matches;
						}
						if (MatchUpLeft(grid, row, column, wordToMatch, caseSensitive))
						{
							Console.WriteLine("row {0}, col {1} UP LEFT", column + 1, row + 1);
							++matches;
						}
						if (MatchUpRight(grid, row, column, wordToMatch, caseSensitive))
						{
							Console.WriteLine("row {0}, col {1} UP RIGHT", column + 1, row + 1);
							++matches;
						}
						if (MatchDownLeft(grid, row, column, wordToMatch, caseSensitive))
						{
							Console.WriteLine("row {0}, col {1} DOWN LEFT", column + 1, row + 1);
							++matches;
						}
						if (MatchDownRight(grid, row, column, wordToMatch, caseSensitive))
						{
							Console.WriteLine("row {0}, col {1} DOWN RIGHT", column + 1, row + 1);
							++matches;
						}
					}
				}
			}

			return matches;
		}

		private static List<char> DetermineFirstLetters(string wordToMatch, bool caseSensitive)
		{
			return DetermineCharactersToMatch(wordToMatch, 0, caseSensitive);
		}

		private static List<char> DetermineCharactersToMatch(string wordToMatch, int index, bool caseSensitive)
		{
			List<char> characters = [wordToMatch[index]];

			if (!caseSensitive)
			{
				var upperCase = wordToMatch.ToUpper();
				if (!characters.Contains(upperCase[index]))
				{
					characters.Add(upperCase[index]);
				}

				var lowerCase = wordToMatch.ToLower();
				if (!characters.Contains(lowerCase[index]))
				{
					characters.Add(lowerCase[index]);
				}
			}

			return characters;
		}

		private static bool DoesCharacterMatch(char[,] grid, int row, int column, List<char> charactersThatCountAsMatches)
		{
			char letter = grid[column, row]; // now reverse them to match the dimensions of the data in the grid
			return charactersThatCountAsMatches.Contains(letter);
		}

		private static bool MatchLeft(char[,] grid, int row, int column, string wordToMatch, bool caseSensitive)
		{
			if (column + ZERO_INDEX_OFFSET < wordToMatch.Length)
			{
				return false;
			}

			for (int t = 1; t < wordToMatch.Length; t++)
			{
				var match = DoesCharacterMatch(grid, row, --column, DetermineCharactersToMatch(wordToMatch, t, caseSensitive));
				if (!match)
				{
					return false;
				}
			}

			return true;
		}

		private static bool MatchRight(char[,] grid, int row, int column, string wordToMatch, bool caseSensitive)
		{
			if (column > (grid.GetLength(0) - wordToMatch.Length))
			{
				return false;
			}

			for (int t = 1; t < wordToMatch.Length; t++)
			{
				var match = DoesCharacterMatch(grid, row, ++column, DetermineCharactersToMatch(wordToMatch, t, caseSensitive));
				if (!match)
				{
					return false;
				}
			}

			return true;
		}

		private static bool MatchUp(char[,] grid, int row, int column, string wordToMatch, bool caseSensitive)
		{
			if (row + ZERO_INDEX_OFFSET < wordToMatch.Length)
			{
				return false;
			}

			for (int t = 1; t < wordToMatch.Length; t++)
			{
				var match = DoesCharacterMatch(grid, --row, column, DetermineCharactersToMatch(wordToMatch, t, caseSensitive));
				if (!match)
				{
					return false;
				}
			}

			return true;
		}

		private static bool MatchDown(char[,] grid, int row, int column, string wordToMatch, bool caseSensitive)
		{
			if (row > (grid.GetLength(1) - wordToMatch.Length))
			{
				return false;
			}

			for (int t = 1; t < wordToMatch.Length; t++)
			{
				var match = DoesCharacterMatch(grid, ++row, column, DetermineCharactersToMatch(wordToMatch, t, caseSensitive));
				if (!match)
				{
					return false;
				}
			}

			return true;
		}

		private static bool MatchUpLeft(char[,] grid, int row, int column, string wordToMatch, bool caseSensitive)
		{
			if (row + ZERO_INDEX_OFFSET < wordToMatch.Length)
			{
				return false;
			}

			if (column + ZERO_INDEX_OFFSET < wordToMatch.Length)
			{
				return false;
			}

			for (int t = 1; t < wordToMatch.Length; t++)
			{
				var match = DoesCharacterMatch(grid, --row, --column, DetermineCharactersToMatch(wordToMatch, t, caseSensitive));
				if (!match)
				{
					return false;
				}
			}

			return true;
		}

		private static bool MatchUpRight(char[,] grid, int row, int column, string wordToMatch, bool caseSensitive)
		{
			if (row + ZERO_INDEX_OFFSET < wordToMatch.Length)
			{
				return false;
			}

			if (column > (grid.GetLength(0) - wordToMatch.Length))
			{
				return false;
			}

			for (int t = 1; t < wordToMatch.Length; t++)
			{
				var match = DoesCharacterMatch(grid, --row, ++column, DetermineCharactersToMatch(wordToMatch, t, caseSensitive));
				if (!match)
				{
					return false;
				}
			}

			return true;
		}

		private static bool MatchDownLeft(char[,] grid, int row, int column, string wordToMatch, bool caseSensitive)
		{
			if (row > (grid.GetLength(1) - wordToMatch.Length))
			{
				return false;
			}

			if (column + ZERO_INDEX_OFFSET < wordToMatch.Length)
			{
				return false;
			}

			for (int t = 1; t < wordToMatch.Length; t++)
			{
				var match = DoesCharacterMatch(grid, ++row, --column, DetermineCharactersToMatch(wordToMatch, t, caseSensitive));
				if (!match)
				{
					return false;
				}
			}

			return true;
		}

		private static bool MatchDownRight(char[,] grid, int row, int column, string wordToMatch, bool caseSensitive)
		{
			if (row > (grid.GetLength(1) - wordToMatch.Length))
			{
				return false;
			}

			if (column > (grid.GetLength(0) - wordToMatch.Length))
			{
				return false;
			}

			for (int t = 1; t < wordToMatch.Length; t++)
			{
				var match = DoesCharacterMatch(grid, ++row, ++column, DetermineCharactersToMatch(wordToMatch, t, caseSensitive));
				if (!match)
				{
					return false;
				}
			}

			return true;
		}

		[TestCase(Example1, 9)]
		[TestCase(Example2, 9)]
		[TestCase(Data, 1835)]
		public void QuestionB(string data, int expected)
		{
			int matches = 0;

			string[] rows = data.Split("\r\n");

			char[,] grid = InitializeGrid(rows);
			PopulateGrid(grid, rows);

			matches += CountCrossedWordMatches(grid, "MAS");

			Console.WriteLine("Total # of Matches: " + matches);
			Assert.That(matches, Is.EqualTo(expected));
		}

		private static int CountCrossedWordMatches(char[,] grid, string wordToMatch)
		{
			List<Tuple<int, int>> matchedAs = [];
			int matches = 0;
			bool caseSensitive = true;

			List<char> firstCharacters = DetermineFirstLetters(wordToMatch, caseSensitive);

			for (int row = 0; row < grid.GetLength(1); row++)
			{
				for (int column = 0; column < grid.GetLength(0); column++)
				{
					char letter = grid[column, row];
					if (firstCharacters.Contains(letter))
					{
						if (MatchUpLeft(grid, row, column, wordToMatch, caseSensitive))
						{
							Tuple<int, int> matchableA = new Tuple<int, int>(row - 1, column - 1);
							if (!matchedAs.Contains(matchableA))
							{
								matchedAs.Add(matchableA);
							}
							else
							{
								++matches;
							}
						}
						if (MatchUpRight(grid, row, column, wordToMatch, caseSensitive))
						{
							Tuple<int, int> matchableA = new Tuple<int, int>(row - 1, column + 1);
							if (!matchedAs.Contains(matchableA))
							{
								matchedAs.Add(matchableA);
							}
							else
							{
								++matches;
							}
						}
						if (MatchDownLeft(grid, row, column, wordToMatch, caseSensitive))
						{
							Tuple<int, int> matchableA = new Tuple<int, int>(row + 1, column - 1);
							if (!matchedAs.Contains(matchableA))
							{
								matchedAs.Add(matchableA);
							}
							else
							{
								++matches;
							}
						}
						if (MatchDownRight(grid, row, column, wordToMatch, caseSensitive))
						{
							Tuple<int, int> matchableA = new Tuple<int, int>(row + 1, column + 1);
							if (!matchedAs.Contains(matchableA))
							{
								matchedAs.Add(matchableA);
							}
							else
							{
								++matches;
							}
						}
					}
				}
			}

			return matches;
		}
	}
}