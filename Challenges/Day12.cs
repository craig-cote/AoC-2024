namespace Challenges
{
	//    Start: 10:45am
	// A Solved: 12:01pm
	// B solved: 03:01pm

	public class Day12 : Shared
	{
		private const string ExampleA1 = "AAAA\r\nBBCD\r\nBBCC\r\nEEEC";
		private const string ExampleA2 = "OOOOO\r\nOXOXO\r\nOOOOO\r\nOXOXO\r\nOOOOO";
		private const string ExampleA3 = "RRRRIICCFF\r\nRRRRIICCCF\r\nVVRRRCCFFF\r\nVVRCCCJFFF\r\nVVVVCJJCFE\r\nVVIVCCJJEE\r\nVVIIICJJEE\r\nMIIIIIJJEE\r\nMIIISIJEEE\r\nMMMISSJEEE";
		private const string ExampleB2 = "EEEEE\r\nEXXXX\r\nEEEEE\r\nEXXXX\r\nEEEEE";
		private const string ExampleB3 = "AAAAAA\r\nAAABBA\r\nAAABBA\r\nABBAAA\r\nABBAAA\r\nAAAAAA";
		private const string Data = "ZZZZPPDDDDDDDDDDDGPPPPPPPPPPZZZZZZXXXXXXXXXXXXXQQQQYYXYUUUFBBBBBBBDDDDDDDDDDDDCCNNNNOOOORUUUUUUUUUUUDZZZZZZZVVCCCCCCCCCCCCCCCCCCCCLLLLQQQQQQ\r\nZZZZPPPDDDDDDDDDDPPPPPPPPPPPPPZZXXXXXXXXXXXXXXXYQYQQYYYYUUFBBBBBBDDDDDDDDDDDDDDDNNNOOOOOUUUUUUUUUUUUUZZZZZZZVZCCCCCCCCCCCCCCCCCCCLLLLLQQQQQQ\r\nPPPPPPDDDDDDDDDDDDPPPPPPPPPPPSZZZXXXXXXXXXXXXXYYYYYQYBYYFUFBBBBBBBDDDDDDDDDDDDDDNNNOOOOOOUUUUUUUUUUUURZZZZZZZZZCCCCCCCCGGCCCCCCCCCLLLLLLLLQQ\r\nPPPPPPDDDDDDDDDDDPPPPPPPPPPPZZZZOXXXXXXXXXXXYYYYYYYYYYYYFFFBBBBBBBBDDDDDDDDDDKDDONNNOOOOOUUUUUUUUUUUUUZZZZZZZZCCCCCCCCCGGGGCCCCLCLLLLLLLLLQQ\r\nPPPPPPDDDDDDGGGGGPPPPPPPPPPPPZZXXXXXXXXXXXXXYYYYYYYYYYYYFFFBBBBBBBBDDDDDDDDDDDOOOWWFOOOOUUUUUUUUUUUUUUZZZZZCCCCCCCCCCCCGGGGGCCCLLLLLLLLLLLQQ\r\nPPPPPPPDDDDDGGGGGPPPGGGGGGGZZZZZXXXXXXXXYYYYPYYYYYYYYYYFFFFFFBBBBBBBDDDDDDDDDYWWWWWWOOOOUUUUUUUUUUUBBUZZCCCCCCCCCCCCCGGGGGHHLLCLLLLLLLLLLLLL\r\nPPPPPPPPZZZDGGGGGDPPGGGGGGGZZZZXXXXXXXXXXYFYYYYYYYYYYYYFFFFMMMMMMMMMDDDNDDDDDYYWWWWOOOOOUMUUUKUUUUUUUUJCCCCCCCCCCCCCCNGGGGHHHLLLLLLLLLLLLLLK\r\nPPPPPPPPQZZDGGGGGDPPGGGGGGGZZZZZXXXXXXXXXYYYYYYYYYYYYVVFFFFMMMMMMMMMDDNYYYYYDYYWWWWOOOOOTMUUUUUUUUUUUJJCCCCCCCCCCCCCCGGGGGHHHLLLLLLLLLLLLLLK\r\nPPPPPPZZZZZZGGGGGDPPGGGGGGGZZZZZXZXXXXXXXYYYYYYYYYYYYVVEFFVMMMMMMMMMBGGYYYYYDYWWWWWOOOMOTMMUUUUUUUUUUUUXCCCCCCCCCCCCCGGGHHHHHHLLLLLLLLLLDJDK\r\nPPPPPPZZZZZGGGGGGGGGGGGGGGGZZZZZZZZZJJXXXYYYYYYYYYYYYVVVYYVMMMMMMMMMBBGYYYYYYYYYWWWOOWWLTTTUUUUUUUUUUUUXCCCCCCCCCCCCCGGGHOHHHHHLLLLLLLLLDDDK\r\nPPPPZZZZZZZGGGGGGGGGGGGGGGGZZZZSSZZZJJYYYYYYYYYYYYYYYYVVYYVMMMMMMMMMYYYYYYYYYYWWWWWWWWYTTTTUUUUUUUUUUUUXCCCCCCCCVCGYGGGGOOHHHHHHLLLLLLLLDDDK\r\nPPPPZZZZZZZGGGGGGGGGGGGGGGGZZZSSSZZZXXYYYYYYYYYYYYYYYVVVVVVMMMMMMMMMYYYYYYYYCCWWWWWWWWWKTTTTUUUUUUUUUZXXXCCCDCVVVGGGGGGGGOOOOOOOLLLLLLLLDDDD\r\nPPPPZZZZZZZGGGGGGGGGGGGGGGGZZZXDSZRZXXYYYYYYYYYPPYYYYMMMMMMMMMMMMMMMYYYYYYYYCCWWWWWWWWTTTTUUUUUUUUUUUZZZXCCCDDGGGGGGGGGGGOOOOOOOLLLLLLLDDDDD\r\nPPPPZZZZZZZGGGGGGGGGGYYYYYYYZZXXIRRRXXXYYYYYYYYPPPPPPMMMMMMMMMMMMMMMYYYYYYYYWWWWWWWWWWTTTTTUUUUUZZZZZZZZZZCDDDDGGGGGGGGGGOOOOOOOHLLLLLLDDDDD\r\nPPPPPPPZZZZGGGGGGGGGGYYYYYMYYZXXRRXXXXXYYYYHHHPPPPPPVMMMMMMMMMMMMMMMMMMMGGCWWWWWWWWWTTTTTTTUUUUPPZZZZZZZZZCDDDBBBGGGGGGOOOOOOOOOOLLLLDDDDDMD\r\nPPPPPZZZZZZGGGGGGGGGGYYYYYYYYZXXXXXXXXXXYXYYYHPPPPPPMMMMMMMMMMMMMMMMMMMMGCCCCWWWVWVWTTTTTTTUUUPPZZZZZZZZZDDDDBBBBBGGGGGOOOOOOOOOOLLLLIIDDDDI\r\nPPPPPPZZZZZGGGGGGGGGGYYYYYYYYZZXXXXXXXXXXXYXPPPPPPPPPMMMMMMMMMMMMMMMMMMMCCCCXXXWTTTWTTTTTTTPPUPPZZZZZZZZZZDDDDDGGGGGGGGGOOROOOOIOILLLIIIIDII\r\nPPPPPPPPIZZGGGGGGGGGGYYYYYYYYZZXXXUUXUXXXXXXPPVVVPPPPMMMMMMMMMMMMMMMMMMMXCCCXXXTTTTWTTTTTTPPPPPPZZZZZZZZZDDDDDDNGGGGGGGGGUOOOOOIIILIIIIIIDII\r\nPPPPPPPPIIIGGGGGGGGGGYYYYYYYYYZZXUUUUUXXXXXXXVVVVVPPPPPPPPPMMMMMMMMMMMMMXXXXXXTTTTTTTTTTTTOOCPPPZZZZZZZZZZZXZNNNNGGGGGGGGUUOOOOIIIIIIIIIIIII\r\nPPPPPPPPPIIGGGGQYYYYYYYYYYYYYYZZXUDUUUXXXXXXVVVVVVVPPPPPPXVMMMMMMMMMMMMMXXXXXXXTTTTTTTTTTTTTCCCPTTZZZZZZZZZZZFFUUUGGGGGGGUUOOIIIIIIIIIIIIIII\r\nPPPPPPPIIIIIIQQQSQQYYYYYYYYYZZZZUUUUUUUXXXXVVVVVVVPPPPPPPXXMMMMMMMMMMMMMXXXXXTTTTTTTTTTTTTTCCCCCCTZIAIZZZZZZFFFFUUUUGUGUUUUUOOIIIIIIIIIIIIII\r\nPPPPPPPPPIIIIQQQQQQQYYYYYYYYZZZUUUUUUUXXVVVVVVVVVVPPPPPPPXXMMMMMMMMMMMMMNNNNXTTTTTTTTTTCCCCCCCCCZIIIAIZZZIZFFFFFFFUUGUUUUUUUNNYYIYYIIIIIIIII\r\nAAPPPPPIIIIIIQQQQQQQYYYYQQQQUUUUUUUUUXXXXXXXVVVVVVVPPPPPPPXMMMMMMMMMMMMMNNNNNTFFFTTTTTTCCCCCCCCCCIIIIIZZIIZFFFFEEFFUUUUUUUUNNYYYYYYYIIIIIIII\r\nAAPPPPIIIIIIIIIQQQQQYYYYQQQUUUUUUUUUXXXXXXVVVVVVVVVPPPPPPPXXXXXXXYYYYYYNNNNNNFFFFTTTCCCCCCCCCCCCCIIIIOIZIIIIFFFFFFUUUUUPPPPPPPPPYYYYIIIIIIII\r\nAAAAPPIIIIIIIQQQQOQQQQQYQQQQQUUUUUUUUUXXXXVVVVVVVSPPPPPPQQQXXXXXRYYYYYYNNNNNNFFFFTFTCCCCCCLCCCCIIIIIIIIIIIIFFFFFFFFUUUUPPPPPPPPPYYYYYIIDIIIZ\r\nAAABQQBBBBIIIIIIOOQOQQQQQQQQQUUUUUUUUUXXXXXVVVVVVSSPPPPQQQQXXXXXXYYYYYYNNNNNNNFFFFFTTTCCCCLLCCCIIIIIIIIIIIIFFFFFFFFFUUUPPPPPPPPPYYYYYYDDIIIZ\r\nAABBBBBBBIIIIIOWOOOOQQQQQQQUUUUUUUUUUUXXXKXKKKVVVPPPPPPQQQQQQEEERYYYYYYNNNNNRRRFFFFTTCCCCLLLLLIIIIIIIIIIIIIFFFFFFFFUUUUPPPPPPPPPYYYYYDDDDDZZ\r\nAAABBBBBBIIIOOOOOOOOOOOQQQQUUUUUUUUUUUXXKKKKKKKKYYYYPZQQEEEEEEEERRRRNNNNNRRRRRRRFFFCCCCCCCLLLLIIIIIIIIIIIIFFFFFFFKFFFUUPPPPPPPPPYYYGYDDDDZZZ\r\nAABBBBBBBIIIOOOOOOOOOOOQQQQQUQQUUUGUUXXXXKKKKKKKYYYPPZQQEEEEEEEERRRNNNNNNRRRRRRRRRRRPCCCCCCLLLLIIIIIIIIIIIVFFFFFVKFVUUUPPPPPPPPPYOYYYYDDDZDD\r\nBBBBBBBBBBIIIOOOOOOOOOOOOQQQQQQUMUGULLXKKKKKKKKKYYYYYQQQEEEEEEEERRRNNNNNLLRRRRRRRRRRRCCCVCILLLLIIIIIIIIIIVVVVVVVVUUUUPPPPPPPPPPPDDYDDDDDDDDD\r\nBBBBBBBBBBBIIOOOOOOOOOOOOOQQQUUUUQGLLLLLKKKKKKKKYYYYQQQQEEEEEEEERRRLLLNLLRRRRRRRRRRRRCCCCSSMNLLIIIIIIIIIIVVVVVVVVVUUPPPPPPPPPPPPDDDDDDDDDDDD\r\nUBBBBBBBBBIIIOOOOOOOOOOOOOQQQQUUQQLLLLLLLLKKKKYYYYQYQQQQEEEEEEEERRRLLLLLLRRRRRRRRRRRRCCCCCSMNLIIIIINIIIIWWVVVVVWWWWUPPPPPAAPPPPADDDDDDDDDDDD\r\nUBBBBBBBBBIIIIOOOOOOOOOCCCQQQQUQQQQQLYYYLYYKKKYYYYQYQQQQEEEEEEEERRLLLLLLLLRVRRRRRRCCRCCCCCSMNNNININNNIIIWWVVVVVVVWWUPPPPPAAPPPPADDDDDDDDDPDD\r\nBBBBBBBBBBIIKOOOOOOOOCCCCCQQQQQQQQQQYYYYYYYKYYYYYYQQBQQQEEEEEEEEEEEEEEEELLLVRMRRRDDRRCCCCCSNNNNNNNNNNIIIIWWVVVVVVWVVPPPPPAAPPPPAQDDDDDPPPPPD\r\nBBBBBBBBBBKKKOKOOOOOOCCCCCCQQQQQQQQQYYYYYYYYYYYYYYYQQQQQEEEEEEEEEEEEEEEELLWWRMRCCCCCCCCCCCSNNNNNNNNNIIINNWWVVVVBBBVVPPPPPPPPPAAAQQQDDDDDPPPP\r\nTBBBBBHBCKKKKKKKKKOOCCCCCCCQQQQQQQQQYYYYYYYYYYYYYYMQQQQQQQQQQEEEEEEEEEEEWWWWRWWCCCCCCCCCCCSSNNNNNNNNNNNNBWWVBBBBOVVVPPPPPPPPPAAAAQQQDPPPPPPP\r\nHHHBBHHHHHKKKKKKKKCCCCCCCCSQQQQQQQQQQQYYYYYYYYYYYYMMMQWQQQQQQEEEEEEEEEEEWWWWWWWCCCCCCCCCCCSSNNNNNNNNNNNNBBBBBBBBBVVVPPPPPPPPPAAAAQQTDPPPPPPP\r\nHHHBBHHHHHKKKKKKKCCCCCCCCCQQQQQQQQQQQQYYYYYYYYYYMYMMMMWWQQQQQLLLLLLLLLWWWWWWWWWCCCCCCCCCCCNNNNNNNNNNNNBBBBBBBBBBBBVVVVVVAAAAAAAAAATTTTPPPPPP\r\nHHHHBHHHHKKKKKKKKCMMCCCCCCYQQQQQQQQQQYYYYYYYYMMYMMMMMMWTQQQQQLLLLLLLLLLWWWWWWWWCCCCCCCCCCCNNNNNNNNNNNNBBBBBBBBBBBBBBVVRVAAAAAAAAATTTTTPPPPPP\r\nHHHHHHHHHHKKKKKMKCMMCCCCCCQQQQQQQQQQQYYYYYYYMMMMMMMMMMMTQQQQQLLLLLLLLLLWWWWWWWWCCCCCCCCCCCDNNNNNNNNNNNNNBBBBBBBBBVVVVVVTAATTTAAATTTTTTPGPPPP\r\nHHHHHHHHHKKKKKMMMMMMMMMMCCCVQQQQQQTTQYYYYYYYMMMMMMMMTTTTTQQLLLLLLLLLLLWWVWWWWWWCCCCCCCCCCCDDAAANNNNNNNNNNNBBBBBBBBVBBVOAAATTTAATTTTTTTPPPPPP\r\nHHHHHHHKKKKMMKKMMMMMMMMMRRRQQQQQQQTTTTYYYYYYYMMMMMMMMTTTTTQLRLLTTTWWWLWWWWWWWWWCCCCCCCCDDDDDDNNNNNDDTNNNAABBBBBBBBBBBVTTAATTTTAATTTTPPPPPPPP\r\nHHHHHHKKKKKKMMMMMMMMMMMMRRQQQQQQQTTTTTYYYYYYMMMMMMMVMTTTTTQTTTTTTTTWWWWWWHWWWWWCCCCCCCCDDDDDDDDNNDDDDNNAAABBBBBBBBBBBBBTTATTTTATTTTTTPPNPPPP\r\nHHHHOHYKKKPKMMMMMMMMMMMMMQQQOQQQQTTTYYYYYYYYMMMMMMMMMMTTYTTTTYYXTWWWWBWWWWWWWWWCCCCCCCCCCCCCDDDDDDDDDDAAAGJBBBBBBBBBBBBBTTTTTTTTTTTTTPPPPPPP\r\nHHKKYHYYMMMMMMMMMMMMMMMMMMMQOQQQTTTTTYYYYYYMMMMMMMMMMMYYYYTTHYYXTWWWWWWWWWGCCWWWWCCCCCCCCCCCDDDDDDDDDDAAAGJJJBBBBJBBBBJJBTTTTHHHHTTHHHPPPPPP\r\nKKKKYWYYUMMMMMMMMMEMMMMMMMMMTTQTTTTUYYYYYYYYMMMMMMMMMMHHYYTTHYYXXWWWWWWWWYCCCWCCCCCCCCCCCCCCDDDDDDDDDDDDDJJJJBBBBJJBBBBBBTTTTHAHHHTXHHHHPPPP\r\nKKKYYYYYMMMMMMMMMEEMMMMMDMMMTTTTTFTTQYYYYHHWWMMMMMMMMHHHHTTTHYYYXXWWWWWWCYCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDJJJJJBBJBJBBBBBTTTTTTTHHCHHHHHHHHHPP\r\nKYYYYYYYYMMYMEMMEEEMMMDDDMMMTTTTTTTTTYYYYHHHHMMPGMMMHHHHHHHHHYYYYXWWWWWWCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDQJJJJJBJJJJBBBBTTTTTTTHHHHHHHHHHHHHH\r\nYYYYYYYYYYYYMEMMEEMMMDDDDDMAHHHHHHTTTTYYHHHHMMMMGMGHHHHHHHHHYYYYYXWGGGGGCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDJJJJJJJJJJUTTTTTTTTAATHHHHHHHHHHHHHH\r\nYYYYYYYYYYYEEEEEEEMMMDMDDDDAAAHHHHHHHHHHHHHHHMMBGGGHHHHHHHHHYYYYYYGGGGGGCCCCCCCCCCCCCCCCCCCCDDIDDMDDDDDDJJJJJJJJJJJMPPPTTTAABAAAHHHHHHHHHHHH\r\nYYYYYYYYYYYYEEEEEEEEMMMDDDDAAAAHHHHHHHHHHHHHHHMBGGGGHHHHYYYYYYYYYYGGGGWGCCCCCQQQCCCCCCCCCCCCDDDZQMQQQQFJJJJJJJJJJJJMPPPPTTAAAAAAHHHHHHHHHHHH\r\nPYYYYYYYYYYYEEEEEEEEMMDDAAAAAAAHHHHHHHHHHHHHVVVGGGGHHYYYYYYYYYYYYYGGGGWWWCCCCCQQQQWCCCCCCCCCDDDDQQQQQQQJJJJJJJJJJJJMPPPPPAAAAAAAAAHHHHHHHHHH\r\nPPYYYYYYYYEEEEEEEEEEEEADAAAAAAAHHAAHHHHHHHHHVVVVVVGYYYYYYYYYYYYYYYGGGGWWWIICCQQQQQQCCCCCCCCCDDDQQQQQQQQJJJJJJJJJJJHIPPPPPPPAAAAVAAAHHHHHHHHH\r\nYYYYYYYYYYYEEEEEEEEEEEAAAAAAAAAAAAAHHHHHHVVVVVVVVVVYYYYYYYYYYYYYYGGGWWWWWWWWXQQQQQQDCDDDDDDDDQFQQQQQQQCCCCJJJJJJJHHIPPPPPAAAAAAAAAHHHHHHHHHH\r\nIIYYYYYYYYYYYEEEEEEEEEAAAAAAAAAAAQQHHHHHHVVVVVVVVVVVYYYYYYYYYYYYGGGGGWWWWWWWQQQQQQQDDDDDDDDDDQQQQQQQQQQQQCJJJJJJJIIIIIIPAAAAAAAAAAHHHHHHHHHH\r\nIIYYYYYYYYYYYYEEEEEAAEAAAAAAAAAAAQQQRRHHHHZVVLLLVVWVYMYYYYYYYYYYGGGGGWWCCWWWQQBQQQQDDDDDDDDDDDQAQQQQQXBJJJJJJJJJNNNIIIIPAAAAAAAAAAHHHHHHHHHH\r\nIIYYYYYJJJJJYYEMEXAAAAAAAAAAAAAQQQQQRRRRHHZVLLLLLWWDMMYYYYYYYYYGGGGGGGGGGIWWWBBBQQQQDDDDDDDDDDQQQQQQQXXXUJJJJJJJNNNIIIIPAAAAAAAATAHSHSHHRRRH\r\nIIIIYYJJJJJYYYEMEXXXAAAAAAAAAAQQQQQQRRRRRLLLLLLLLLWDDDYYYYYYYYAGGGGGGGGGRRRRRBXXXXXXXXXJJDDDDQQQQQQQQXXXJJJJJJJNNNNINNNPPBAAAAASSSSSHSHSRRRH\r\nXXXIYYJJJJZYYYEMMXXXXAAAAAAAAQQQQQQQQQRRLLLLLLLLLLWLDDDYYYDDYAAGAGAGGGZGRRRRRRXXXXXXXXXXXXXXJDDDDDDDXXXXXXXJNNNNNNNNNNNPPAAALASSSSSSSSSSHHHH\r\nXXXXYGGJJJZYYYXXXXXXXXAAAAQQQQQQQQQQQQRRLLLLLLLLLLLLDDDDYDDDAAAAAAAJLLLLLLLLLRXXXXXXXXXXXXXXDDDDDDDXXXXXXXXJNNJJNNNNNNNNNNALLSSSSSSSSSSSSHQQ\r\nXXGGYGGGJJJYYCXXXXXEEAAAAAAQQQQQQQQQWWLLLLLLLLLLALJLDDDDDDDDAYYAAAAALLLLLLLLLRRRRXXXXXXXXXXXDDDDDDDXXXXXXXXJJJJEJJNNNNNNNNNNNDSSSSSSSSSSSQQO\r\nXXGGGGGGCXXXXXXXXXXEAAAAAAAQQQQQQQQQQWWLLLLLLLLLLLLDDDDDDDAAAYYYAAAALLLLLLLLLRRYYXXXXXXXXXXXDDDDDDDXXXXXXXXJJJJJJJNNNNNNNNNNSSSSSSSSSSSSSSSO\r\nXXGCCGCGCXXXXXXXXXXXXXXXAAAQQQQQQQQQQWWLLLLLLLLLLLLDDDDDDDYYYYYYSSSSLLLLLLLLLRXXXXXXXXXXXXXXJDDDDDXXXXXXXXJJJJJJJNNNNNNNNNNNSSSSSSSSSSSSSOSO\r\nXCCCCCCCCXXXXXXXXXXXXXXAAAAQQQQQQQQQQWKKLLLLLLLLLLLLDDDDDYYYYYYYYYLLLLLLLLLLLRLLLLXXXXXXXXXXDDDDDDDXXXXXXXXJJJJNJNNNNNNNNNNNSSSSSSSSSOSSSOOO\r\nXXCCCCCCCXXXXXXXXXXXXXXXXAATTTQQQQQQQQKKKLLLLLLLLLILDDDDDYYYYYYYYYLLLLLLLLLLLRLLLLXXXXXXXXXXDDDDDDDXXXXXXXZJJJJNNNNNNNNNONNNWSSSSSOSOOSOOOOO\r\nXXCCCCCCCXXXXHIHXXXXXXXXXTTTQQQQTTQTTTTKLLLLLLLLLLDDDDDDDXYYYYYYYYLLLLLLLLLLLLLLLLLLLFZZZZZZDDDDDXXXXXXZZXZJJJJNNNNNNNNNONNNWSSSSSOOOOOOOOOO\r\nXCCCCCCXXXXXXHHHXXXXXXXXXXTTTQQQTTQTTTKKKKKKLLLLLWDDDDDDDYYYYYYYYYLLLLLLLLLLLLLLLLLLLZZZZZZZDDDDDXXXXXXXZZZZJJNNNNNNNNNNNNBBSSSSSOOOOOOOOOOO\r\nXCCCCCCXXXXXHHHHXXXXXXXXXTTTTTTTTTTTTTKKKKWWWWCCLWWDXXTXXYYYYYYYYYLLLLLLLLLLLLLLLLLLLFZZZZZZUUDDDDDDXZZZZZZZJZZNNNNNNNNQNBBBBBSNHYOOOOYYYOOO\r\nXXXXXCCXXXXXHHHHXXXXXXXXXXXTTTTTTTTTTTTKKRRWWWWWWWWWXXXXXXYYYYYYYYLLLLLLLLLLLLLLLLLLLFZZZZUUUUUUUDDDDDDZZZZZJZZZNNNNNNNNNBBBBBBNYYOOOYYYYOOO\r\nXXXXXXXXXXXXXXXXXXXXXXXXXTTTTTTTTUTTTUUUURRRWWWWWWWXXPPXXXXXYYUYYYUUAAAAAAAAAFAFFFFFFFZZZZIIUUUUDDDDDZZZZZZZJZZZNNNBBNNNBBBBBNNNYYYYYYYYYOYO\r\nXXXXXXXXXXXXXXXXXXXXXXTTTTTTTTTTTUUUUUUUURRRRWWWWWWPPPXXXXEYYYUUYYUUAAAAAAAAAAAXFFFFFFZZZZUUUUUUUDDDDDZZZZZZZZZZZZSBBBBBBBBBBNNNBBYYYYYYYYYY\r\nXXXXXXXXXBBBBBXXXXXXXXTTTTTTITTTIIUUUUUUBUUUUWWWWWPPPPPXXXUUUUUUYYUUAAAAAAAEAAAXFFFFZZAZZZUUUUUNUUDDDDDZZZZZSSSSSZSBBBBBBBBBBNNNYYYYYYYYGGGG\r\nXXXXXXXXXXBBOOXXXXXXXXTTTTTTIITTIIIIUUUUUUUUUUWWWWWPPPPPXXUUUUUUUUUAAAAAAAAEXXXXXFFFFZZZZZUUUUUUUDDPPDDDZZZZSSSSSSSSBBBBBBBBBBNBYYYYYYYYDDDD\r\nXXXXXXXXBBBBOOXJXXXXXIIITIIIIIIIIIIIUUUUUUUUUUUWWWWWPPPKKAUUUUUUUUAAAAAAAAEEXXXXXXXFFZZZZUUUUUUUUUDPPPDDZZSSSSSSSSSSSSBBBBBBBBBBYYYYYYYZZDDD\r\nXXXXTXXBBBBBBBOXXXXXBBIIIIIIIIIIIIOUUUUUUUUUUUUUUWWKKKKKKUUUUUUUUUUAAAOAAAADXXXXXXXXFFZZUUUUUUUUPPPPPDDDDDSSSSSSSSSSSSBBBBBBBBBYYYYYYYYZDDDD\r\nXXXXTTTYYBBBBBBXXXXXBBBIIIIIIIIIIIUUUUUUUUUUUUUWWWWWKKKKKUKKUUUUUUUUUIOOOOODXXXXXXXXXUGUUUUUUUUUPPPDDDDDDDSSSSSSSSSSSSBBBBBBBYYYYYYYYYDDDDDD\r\nXXXXTTLTTBBBBBBBBBBBBBBIIIIIIIIIIIUUKUUUUUUUUUUSKWWKKKKKKKKKKKGUUUUUUUIOFODDDXXXXXXXUUUUUUUUUUUPPPPDDDDDDDSSSSSSSSSSSSBBBBBBBBBYYYYYYDDDDDDD\r\nXTTTTTTTTBBBBBBBBBBBBBBBIIIIIIIIIIPUUUUUUUUUUUUUKWKKKKKKKKTKKKKUOUUUUUOOOODDDXXXXXXXUUUUUUUUUUUUPPPDDDDDDDDDDSSSSSSSSSBBBBBBBBBYYYYYYYYDDDDD\r\nTTTTTTTXTBBBBBBBBBBBBBBIIIIIIIIIIIPPUUUUUUUUUUUUKKKKKKKKKKKKKKKOOOUUFUOOOOODDXXXXXXXXXXUUUUUUUUUPPPDDDDDDDDDDSSSSFFFFFFFFFBBBBBBBYYYYYDDDDDD\r\nTTTTTTTTTBBBBBBBBBBBBIIIIIIIIIIUIIPPPPUPPUUUUUKKKKKKKKKKKKKKKKOOOOOUODOOOOODOOXXXXXXXXXXUUUZUUZZPPPPDDDDDFFFFFFFSFFFFFFFFFBBBBBBYYYLLYLRDDDD\r\nTTTTTTTTTBBBBBBBBBBBBBIIIIIIIIIUUUPPPPPPPUUUHHHHKKKKKKKKKKKKKKOOOUUUOOOOOOOOOHHXXXXXXXXXXZZZZZZZPPPPPDDDDFFFFFFFFFFFFFFFFFBBBBBYIYYYLLLRDDRR\r\nTTTTTTTTTMTBBBBBBBBBBBIBBIIIIUIIUUPPPPPPPPPHHHNHKKKKKKKKKKKKOOOOOOOOOOOOOOOOOOPXXXXXXXXXCZZZZZZZZPPPPDDDDFFFFFFFFFFFFFFFFFBBBBYYYYYYRRRRRRRR\r\nTTTTTTTTTMTBBBBBRBBBBBBBIIIIIUUUUUPUUPPPPPHHHHHHHKKKKKKKKKKKOOOOOOOOOOOOOOOOOOPXXXXXXXCCCCCZZZZZZPPPPDDDDFFFFFFFFFFFFFBBBBBBBBBCBKYFRRRRRRRR\r\nTTTTTTTTTMTBRBBRRBBBBBBBIIIIIIUUUUUUUPPHHHHHHHHHHKKKKKKKKKKKKOOOOOOOOOOOOOOPOOPXKKKXXXCCCCCZZZZZZZZPDDDOOFFFFFFFFFFFFFBBBBBBBBBBBKKCRRRRRRRR\r\nTTTTTTTTTTTRRRRRRRRBBBBBBIIIIIUUUUUUUUHHHHHHHHHHHHKKKKKKKKKSSOOOOOOOOOOOOOOPPPPXKKKKKKCKCCCZZZZZZZZPDWDOOFFFFFFFFFFFFFBBBBBBBBBBBKCCCCCRRRRR\r\nTTTTTTTTTTTDRRRRRRBBBBBOOFIILIPUUUUUUUHHHHHHHHHHHHHKKKSSZZZSSOSSOOOOOOOOOOOPPPPPKPPKKKCKKCCCOZZZZZZPPDDOOFFFFFFFFFFFFFBBBBAABBBBBKKCCCRRRRRR\r\nTTTTTTTTTRRRRRRRRRBBBBOOOOIIUPPUUUUUUUHHHHHHHHHHHHSSSSSSSSSSSOSSSSSDOOOOCOOKPPPPPPPKKKKKKKCCCZZZZZZZPPDOWFFFFFFFFFKBBZBKKKBBBBBBBKKKCCCRRRRR\r\nTTTTTTTTTRRRRRRRRRBBOBBOOOOUUUUUUUUUHHHHHHHHHHHHHVSSSSSSGSSSSOOSSSSDDDDOOOPPPPPPPPPPKKKKKKCCCKKZZZZZZQQOOFFFFFFFFFKBBBBBKKBBBBBBBKKKCCXCYCRR\r\nTTTTTTTTBRRRRRRRRROOOOOOOOOUUUUUUUUOHHHHHHHHHHHHHVSSDSSSGSSSSOSSSSSDDDOOOBBBBPPPPPPKKKKKKCCCKKKKZQRQQQQQOFFFFFFFFFBBKKKKKKBKBBKKBKKKCCCCCCRR\r\nTTTBBBBBBBRRRRRRRROOOOOOOOOOUUUUUUUOHHHHHHHHHHHHHSSSSSSSSSSSSSSDDDDDDBOOOBBBPPPPPPPKKKKKKKKKKKKQQQQQQQOOOFFFFFFFFFBKKKKKKKKKBBKKKKKKCCCCCCCR\r\nTTTFFBBBBBRRRRRRRRROOOOOOOOOOUOUOOUOOFFFFHHHHHHHSSSSSSSSSSSSSSSAADDDBBBBBBBBBBPBPBBBKKKKKKKTTKQTQQQQQQQOOFFFFFFFFFKKKKKKKKKKKKKKKKKDCCDCCCCE\r\nTFFFFBBBBBRRRRRRRRROOOOOOOOOOOOOOOOOOFFHHHHHHHHHHSSSSSSSSSSSSSSAADABBBBBBBBBBBBBBBBBKKKTTTTTTKQQQQQQQQOOOFFFFFFFFFKKKKKIKKKKKKKKKKKDDDDDDCEE\r\nTTFFFBBBBBGRRRRRRRREEOOOOOOOOOOOOOOOFFFHVHHHHHHHHSSSSSSSSSSSSSJAAAABBBBBBBBBBBBBBBBBBBKTTTTTKKQQJQQQQQQOFOOOOOOOKKKKKIIIKIKKKKKKKKDDDFDDDDEE\r\nTTTFBBBBCBRRRRRRRRRREOOOOOOOOOOOOOFOOOFFHHHHHHHHHHSSSSSSSSSSSSSYAAABBBBBBBBBBBBBBBBBBBKTTTTTKKKKQQQQQQQFFOOOOOZZGGKIIIIIIIIDDKKKKDDDZDDDDDEE\r\nTNTFWBBBBRRRRRRRRRGREOEOOOOOOOOOOOFFOOFFFFHHHHHHWWWSSSASSSSSSSAAAAABBBBBBBBBBBBBBBBBIBKKTTKKOOKKKQQQQQQFOOOOOGGGGGIIIIIADDTDDDKKKDDDDDDDEEEE\r\nWWWWWWBBBRRRRRRRRRRBEEEEEOOOOOOOOOFFFFFFFFHHHHWWWWWWWWAASSSSAAAAAAAGBBBBBBBBBBBBBBQQGGKKKKKKOOKOKQQKQQQFFZZOOZGGGGIIIIIADDDDDDDDKKDDDDDEEEEE\r\nWWWWWWBBBRRBBBBBBRRBBBEEEOOOOOOOOOOXXFFFFFFHHHWWWWWWWWWAAAAAAAAAAAAABBBBBBBBKBBBBBGGGGGGKKKKOOOOKKKKYQQFFZZZOZGGGGIIIIIIIDDDDDNNKKDDDDDEEEEB\r\nWWWWWWWBBBBBBBBBBRRBBBBEEEOOOOOXXXXXXFFFFFFFNFFFWWWWWAAAAAAAAAAAAKAKBKBBBBBGGGWBBBGGGGGEHHKKOOOOOOKKYHHYYZZZZZGGGGGIIIIIIIIDDINRBKDDEEEEEBBB\r\nWWWWWWWWWWBBBBBBBBBBBBEEUOOOOOOXXXXXXFFFGFFFFFFFFWWWAAAAAAAAAAAAAKKKKKKBBBGGGGGSSSGGGGGGGHKKKOOOOKKKYYYYYZZZZZGGGGGGIIIIIIIIIINRBBLBBEEEBBBB\r\nWWWWWWWWBBBBBBBBBBBBBBUUUPOOOOOUQXQXPFFFFFFFFFFWFWAAAAAAAAAAAAAAAKKKKKKKBBGGGGGSSSGDGGGGGHHHHXOOOYYYYYYYYZZZZZGGGGIGIIIIIIIIIINBBLLBBBBBBBBY\r\nWWWWWWWBBBBBBBBBBBBBBBUUUUUOUUOUQQQFFFFFFFFFFFFWWWWAAAAAAAAAAAAAAKKKKKGKBVGGGGGSSSGGGGGGHHHHOOOOSYYYYYYYYZZZZZZGZZIIIIIIIIIIINNBBBBBBBBBBBBB\r\nWWWWWBBBBBBBBBBBBBBBBOOUUUUUUUUUUQQQFFFFFFFFFFFWWWWWWAAAAAAAAAAAAKKKKKGGVVGGGGGGGSGGGGGGHHHHHHHHYYYYYYYYYYYZZZZZZZIIIIIIIIIIINNBBBBBBBBBBBBB\r\nWWWWWBNBBBBBBBBBBBBBUUUUUUUUUUUUUQQQFFFFFFFFFFFFFFWWWWAAAAAAAAAKKKKKKGGGGGGGGGGGGGGGGGGGHHHHHHYYYYYYYYYYYYYZZZZZZZIIIIIIIIIIIINNBBBBBBBBBBBB\r\nWWWWWBBBBBBBBBPPBBBBBUUUUUUUUUUUUQQQMMMMMMMMFFFFFFWWWWAAAAAAAAKKKKKKKKKGGGGDUGSGTTGGRGGGGVHHHHYYYYYYYYYYYYYYZZTTTZIIIITIIIICCNNBBBBBBBBBBBBB\r\nWWWWWWCCBBPPPPPPVBBBNUUUUUUUUUUUUQQQMMMMMMMMFFFFFFWWWWWWAAAAAKKKKKKKKKKKKKDDDSSSGGGGGGGGHHHHHHYYYYYYYYYYYYYQZZZTTTTITTTIIICCNNBBBBBBBBBBBBBB\r\nWWWWWWBBBBBPPPPPPBNNNNNNUUUUUUUUACQCMMMMMMMMFFFFFFWWWWWWWAAKKKKKKKKKKKKKKDDSSSJJJJJJJJJGHGGHHHHYYYYYYYYYYYYYYZZTTTTTTTTICCCNNNCCCCBBBBBBBBBB\r\nWWWWWWWMBBBPZPPPPANNNNNNUUUUUUQUCCCCMMMMMMMMFFFFFWWWWQWWWAKKKKKKDDDDDKKDDDDDDSJJJJJJJJJGGGGGHHYYYYYYYYYYYYYYYTTTTTTTTTTICCCCCCCCCCBBBBBBBBBD\r\nWWWWAWBBBBBBZPPPPPNNNNNNNUUUUUQQCCCCMMMMMMMMYFFFFWWWWQQQWAKKKKKKKKDDDDDDDDDDDSJJJJJJJJJGGGGGGHHHYYYYYYYYYYYYTTTPTTTTTTTTTCCCCCCCCCBBBBBBBDDD\r\nAAAAABBBBBBBPPPPPNNNNNNNUUUUQQQCCCCCMMMMMMMMKYFFFWWQWQQQQKKKKKKKKDDDDDDDDDDDDSJJJJJJJJJGGGGGGHHHHHYYYYHHYYYYTTPPTTTTTTCTTCCCCCDDDCBBBBBBBDDD\r\nAAAAAAABBBBBPPPPPPNNNNNNUUUUMMMMMMMMMMMMMMMMYYYFFFQQQQQQQQKKKKKKKDDDDDDDDDDDSSJJJJJJJJJGYGGHHHHHHHHYYHHYYYYYTTPTTTTTTTCCCCCCCCDDDDBDDDDDDDDD\r\nAAAAAAAAAABBAPPPPPPAAAANUUUYMMMMMMMMMMMMMMMMYWWWWWQQQQQQQQKKKKKKKKKDDDDDDDDDDDJJJJJJJJJGGGGHHHHVHHHYYHHHHHYPPPPPPTTMTTTTTCCCCCGGDDBDDDDDDDDD\r\nAAAAAAAAAAAAAAAAAAAAAANNNYGYMMMMMMMMMMMMMMMMWWWWWWQQQQQQQQSSSSKKKKKDDDDDDDDDDDDDSSSSGGUGGYGHHHHVVHHHHHHOHOOOOPPPTTTMTTWWWCCCCCGGDDDDDDDDDDDD\r\nAAAAAAAAAAAAAAAAAAAATNNYYYYYYYYMMMMMWWYYYYWWWWWWWWWCQQQQQQQQSKKKSDDDDDDSSSSDDOOYYYYSYYYYGYYVVVHVVVHHHHHOOOOOOPPPOMMMMXWWWCCCCCGUDDDDDDDDDDDD\r\nAAAAAAAAAAAAAAAAAAAATNNYYYYYYYYMMMMMWWWYYYYWWWWWWWYCVQQQQQQQSSSSSDDDDSSSSSSSDOOYYYYYYYYYYYVVVVVVVHHHHHOOOOOOOOOOOOOMXXXWCCOCCCGGDDDDDDDDDDDD\r\nAAAAAAADDDAAAAAAAATTTNNNYYYYYYYMMMMMWWWYWWWWWWWWWWWCQQQQQQQSSSSSDDDDDSSSSSSSSSOYYYYYYYYYYYVVVVVVVVVVHHOOOOOOOOOOOBBXXXXXCCOOGGGGGDDDDDDDDDDD\r\nAAAAAAADDAAAAAAAATTTTTNNNYYYYYYMMMMMWWWWWWWWWWWWWWWCCYCQLQSSSSSSSDDDPSSSSSSSSSOOOOYYYYYYYVVVVVVVVVVHHHHOOOOOOOOOOOBXXXXXGCGOGGGGGGGDDDDDDDDD\r\nAAAADDDDDDAADAATTTTTTTNNNYYYYYYMMMMMWWWWWWWWWWWCCCCCCCCCCIISSSSSDDDTDSSSSSSSSSOOOOOYYVVVVVVVVVVVVVVHHHHOOOOOOOOOOOXXXXXGGGGGGGGGGGDDDDDDDDDD\r\nAAADDDDDDAADDAATTTTTTNNNNYNNYKKMMMMMWWWWWWWWWWWCCCCCCCCIIIISSSSSDDTTTSSSSSSSSSWOOOYYZVVVVVVVVVVVVVVVOOOOOOOOOOOOOXXXXXFGGGGGGGGGGGGDDDDDDDDD\r\nAADDDDDDDDDDDAATCTTNNNNNNNNNNNKKKKKWWWWWWWQWWWCCCCCCCCCIIIIXSSSSSRSTTTIIISSSSSWWWWZZZZVVVVVVVVVVVVVVOOOOOOOOOOOOOXXXXXFFQGGGGGGGGDDDDDDDDDDD\r\nAADDDDDDDDDDDAAKCTTTNNNNNNNNNKKKKWKWWWWWWWQWWCCCCCCCCGGIIIIKSSSSSSSTTTIIISSSSSWWWZZZZZVVVVVVVVVVVVVVVOOOYYYYYYYYOXXXXXFFQQGGGGGGGDDODDDDDDDD\r\nAADDDDDDDDDDDAAKCCTNNNNNNNNKKKKKKWWWQWWWQWQQWCCCCCCCCCGGIKKKKKSSSSTTTTTIIWWWWWWWWZZZZZZVVVVVVVVVVVVVVLOOYYYYYYYYOOOXXXXFXXIGGGGGGAADDDDDDDDD\r\nDDDDDDDDDDDDDDDKCCNNNNNNNNNKKKKKKKWKQQQQQQQQCCQCCCCCCCGIIKKKKKKSSSTWWWTTIWWWWWWWWZZZZZZVSVVVVVVVVVVVVVWOYYYYYYYYOXXXXXXXXXIGGGGGGGADUPPPDDDD\r\nVVDDDDDDDDDDDDWKKCKNNNNNNNKKKKKKKKKKKKQQQQQQQQQQCCCCCGGGDKKKKKKSSSSWWWWWWWWWWWWWWZZZZZZZZZWWWWVVVVVVVWWOYYYYYYYYXXXXXXXXXXXZZLLAAGAAPPPPDDDD\r\nVVVDDDDDDDDDDWWKKKKKNNNNNNNKKKKKKKKKKKKQQQQQQQQQQCCCCCGGGKKKKKKKSSWWWWWWWWWWWWWWWZZZZZZZZWWWWWVVVVVVVWOOYYYYYYYYYYYYYYXXXXKLLLLAAAAAPPPPDDDD\r\nVVVVDDDDDDDDDWWKKKKKNNNNNKNKKKKKKKKKKKQQQQQQQQQCCCCCCCGGGKKKKKKKKSWWWWWCWWWWWWWWRZZZZZZZZWWWWWWZZOVZZZZTYYYYYYYYYYYYYYXXXPLLLLLAAAAAPPPPDDDD\r\nVDDDDDDDDDWWWWKKKKEKKKKKKKNKKKKKKKKQQKQQQQQQQVQGCGCCCGGGGFKKKKKKWWWWWWWCCWWWWWWWWWZZZZZZZZWWWWZZZVVZZZZZYYYYYYYYYYYYYYXXXXLLLLLLLAAAANUNNDDD\r\nPDPDDDDDDDWKKKKKKKKKKKKKKKNNKKCCKKKQQQQQQQQQQQQGGGGCCGGGGKKKKKKKBWWWWWWWWWWWWWWWZZZZZZZZZZWWWWWZZZZZZZZZYYYYYYYYYYYYYYXXXXLLLLLLLAAAANNNNDDN\r\nPPPDDDDDDDWWWKKKKKKKKKKKKKCCOCCCKQQQQQGGQQQQQQQGGGGGGGGGKKKKKKKBBBWWWWWWWWWWWWWWWZSZZZZZZZWWWWWZZZZZZZZZYYYYYYYYYYYYYYXXJLLLLLLLLAAAANNRNNDN\r\nPPPPPDDDDDWWWKKKKKKKKKKKKCCCCCCCCQQQQGGGQQQGGQRGGGGGGGGKKKKKKBBBBWWWWWWWWWWWWWWWWSSZZZZZWWWWWWWZNNZZZZZZZZQQQQYYYYYYYYXXXLLLLLLBLAAAANNNNNNN\r\nPPPPPPPDWWWWWKKKKKKKKKKKCCCCCCCCCCQQGGGGGQQGGGGGGGGGGGGKKKKKBBNBBBBBWWWYWWWWWWWSWWSSZZYZZWEEEEEZRRRZZZZZZZQQQQQQQQXXZZXUULLLLLLLYYYAANNNNNNN\r\nPPPPPPPPWWWWWKKKKKKKKKKCCCCCCCOOCYQQGGGGGGGGGGGGGGGGGGGKKKKKMBBBBBBBWWWYYWWWWWSSSSSSZZZEEEEEEEJRRRRZZZSZZZQQQQQQQQRZZZDDUULLLYYYYYYNNNNNNNNN\r\nPPPPPPPPWWWWKKKKKKKKKKKKCCCCCCOOCQQTGGGGGGGGGGGGGGGGGGGKKKKKBBBBBBBBYYYYYYWYYYSSSSSSZZEEEEEEEEJRRRRRZRRQQQQRQQQQQQRRRDDDUUYYYYYYYYNNNNNNNNNN\r\nPPPPPPPPPPPWWKKKKKKKKKKKKCCCCCOTTQOTTGGGGGGGGGGGGGGGGGGGGGGKBBBBBBBYYYYYYYYYYYSSSSSSZAAEEEEEEEERRRRRRRRQRQQRQQQQRRRRRDDUUUUYYYYYYYNNNNNNNNNN\r\nPPPPPPPPPPPPWMMKKKIKWWKCCCCCCCOOTTTTTTTGGGGGGGGGGGGGGGGGGGGKGGBRBWWYYYYYYYYYYYSSSSSSSAAEEEEEEEERRRRRRRRRRRRRQQRRRRRRRDDUYYYYYYYYNNNNNNNNNNNN\r\nPPPPPPPPMPPPMMMMKKIKWWKCCCCCCCOOTTTTTTTTGGGGGGGGGGGGGGGGGGGGGYYYYWYYYYYYGYYYYYYSSSSSSSSEEEEEEEEEERRRRRRRRRRRQQRRRRRRRRRRQYYYYYYYNNNNNNNNNNNN\r\nSPPPPMPPMMMMMMMMKKKKWCCCCCCCCCCCCCTTTTTGGGGGGGGGGGGGGGGGGGGGGYYYYWYYYYYYYYYYYYYSSSSSSSUEEEEEEEEEERRRRRRRRRRRQQRRRRRRRRQQQYYYYYYYNNNNNNNNNNNN\r\nSPPPPMMMMMMMMMMKKKCWWCCCCCCCCCCDTTTTTTTTIGGGGGGGGGGGGGGGGGGGYYYKYYYYYYYYYYYYYYYSSSSSSEEEEEEEEEERRRRRRRRRRRRRRQRRRRRRRGQQQQYYYYYYYYNNNNNNNNNN\r\nSPSMMMMMMMMMMMMKOOCCCCCCCCBBBBCDTTTTTTTTIGGGGGGGGGGGGGGGGGGYYYYYYYYYYYYYYYYYYYYYYSSSSIEEEEEEENRRRRRRRRRRRRRRRRRRRRRRRGGGQQYYYYYYYYNNNNNNNNNN\r\nSSSMMMMMMMMMMMMOOOOCCCCCCCBBBBBTTBTTTTTTTGGGGGGGGGGGGGGGGGGGYYYYYYYYYYYYYYYYYYYYYSIIIIIIEEEEERRRRRRRRRRRRRRYRRRRRRRGGGQQQQQQYYYYYYYNNNNNNNNN\r\nSMMMMMMMMMMMMMMMOOOOOCCCCCBBBBBBBBTTTTTPPPPGGGGGGHGGGGGGGGGGGYYYYYYYYYYYYYYYYYYIIIIIIIIIIIEAERRRRRRRRRRHHHRRRRRZZGGGGGGQQQQYYYYYYYBNNNNNNNNN";

		public class Side
		{
			public CardinalDirection Direction { get; set; }
			public List<Tuple<int, int>> CellSharingSide { get; set; } = [];
		}

		[TestCase(ExampleA1, 140)]
		[TestCase(ExampleA2, 772)]
		[TestCase(ExampleA3, 1930)]
		[TestCase(Data, 1471452)]
		[Parallelizable]
		public void QuestionA(string data, int expected)
		{
			int solution = 0;

			var grid = GenerateNewPopulatedGrid(data);
			WriteGrid(grid);

			List<List<Tuple<int, int>>> regions = IdentifyAllRegions(grid);
			foreach (var region in regions)
			{
				Tuple<int, int, int> fencingRequirements = CalculateFencingRequirements(region);
				solution += fencingRequirements.Item3;
			}

			Console.WriteLine(solution);
			Assert.That(solution, Is.EqualTo(expected));
		}

		private static List<List<Tuple<int, int>>> IdentifyAllRegions(char[,] grid)
		{
			var processedPlots = new bool[grid.GetLength(0), grid.GetLength(1)];

			List<List<Tuple<int, int>>> regions = [];

			for (int y = 0; y < grid.GetLength(0); ++y)
			{
				for (int x = 0; x < grid.GetLength(1); ++x)
				{
					if (processedPlots[y, x])
					{
						continue;
					}

					var startingPlot = new Tuple<int, int>(y, x);
					List<Tuple<int, int>> region = [];
					region.Add(startingPlot);

					region = IdentifyRegion(grid, y, x, region);
					regions.Add(region);

					foreach (var plot in region)
					{
						processedPlots[plot.Item1, plot.Item2] = true;
					}
				}
			}

			return regions;
		}

		private static List<Tuple<int, int>> IdentifyRegion(char[,] grid, int y, int x, List<Tuple<int, int>> region)
		{
			var north = new Tuple<int, int>(y - 1, x);
			if (!region.Contains(north) && (y > 0) && (grid[north.Item1, north.Item2] == grid[y,x]))
			{
				region.Add(north);
				IdentifyRegion(grid, north.Item1, north.Item2, region);
			}

			var south = new Tuple<int, int>(y + 1, x);
			if (!region.Contains(south) && (y < grid.GetLength(0) + ZERO_INDEX_OFFSET) && (grid[south.Item1, south.Item2] == grid[y, x]))
			{
				region.Add(south);
				IdentifyRegion(grid, south.Item1, south.Item2, region);
			}

			var west = new Tuple<int, int>(y, x - 1);
			if (!region.Contains(west) && (x > 0) && (grid[west.Item1, west.Item2] == grid[y, x]))
			{
				region.Add(west);
				IdentifyRegion(grid, west.Item1, west.Item2, region);
			}

			var east = new Tuple<int, int>(y, x + 1);
			if (!region.Contains(east) && (x < grid.GetLength(1) + ZERO_INDEX_OFFSET) && (grid[east.Item1, east.Item2] == grid[y, x]))
			{
				region.Add(east);
				IdentifyRegion(grid, east.Item1, east.Item2, region);
			}

			return region;
		}

		private static Tuple<int, int, int> CalculateFencingRequirements(List<Tuple<int, int>> region)
		{
			int area = region.Count;
			int perimeter = CalculatePerimeter(region);

			return new Tuple<int, int, int>(area, perimeter, area * perimeter);
		}

		private static int CalculatePerimeter(List<Tuple<int, int>> region)
		{
			int exposedSides = 0;

			foreach (var plot in  region)
			{
				var north = new Tuple<int, int>(plot.Item1 - 1, plot.Item2);
				if (!region.Contains(north))
				{
					++exposedSides;
				}

				var south = new Tuple<int, int>(plot.Item1 + 1, plot.Item2);
				if (!region.Contains(south))
				{
					++exposedSides;
				}

				var west = new Tuple<int, int>(plot.Item1, plot.Item2 - 1);
				if (!region.Contains(west))
				{
					++exposedSides;
				}

				var east = new Tuple<int, int>(plot.Item1, plot.Item2 + 1);
				if (!region.Contains(east))
				{
					++exposedSides;
				}
			}

			return exposedSides;
		}

		[TestCase(ExampleA1, 80)]
		[TestCase(ExampleA2, 436)]
		[TestCase(ExampleB2, 236)]
		[TestCase(ExampleB3, 368)]
		[TestCase(ExampleA3, 1206)]
		[TestCase(Data, 863366)]
		[Parallelizable]
		public void QuestionB(string data, int expected)
		{
			int solution = 0;

			var grid = GenerateNewPopulatedGrid(data);
			WriteGrid(grid);

			List<List<Tuple<int, int>>> regions = IdentifyAllRegions(grid);
			foreach (var region in regions)
			{
				Tuple<int, int, int> fencingRequirements = CalculateFencingRequirements2(region);
				solution += fencingRequirements.Item3;
			}

			Console.WriteLine(solution);
			Assert.That(solution, Is.EqualTo(expected));
		}

		private static Tuple<int, int, int> CalculateFencingRequirements2(List<Tuple<int, int>> region)
		{
			int area = region.Count;
			int perimeterSides = CalculatePerimeterSides(region);

			return new Tuple<int, int, int>(area, perimeterSides, area * perimeterSides);
		}

		private static int CalculatePerimeterSides(List<Tuple<int, int>> region)
		{
			List<Side> sides = [];

			foreach (var plot in region)
			{
				var northNeighbour = new Tuple<int, int>(plot.Item1 - 1, plot.Item2);
				if (!region.Contains(northNeighbour) && !IsAlreadyContainedInMatchingSide(sides, CardinalDirection.N, plot.Item1, plot.Item2))
				{
					var northSide = new Side() { Direction = CardinalDirection.N };
					northSide.CellSharingSide.Add(plot);

					CompleteNorthSide(region, plot.Item1, plot.Item2, northSide);
					sides.Add(northSide);
				}

				var eastNeighbour = new Tuple<int, int>(plot.Item1, plot.Item2 + 1);
				if (!region.Contains(eastNeighbour) && !IsAlreadyContainedInMatchingSide(sides, CardinalDirection.E, plot.Item1, plot.Item2))
				{
					var eastSide = new Side() { Direction = CardinalDirection.E };
					eastSide.CellSharingSide.Add(plot);

					CompleteEastSide(region, plot.Item1, plot.Item2, eastSide);
					sides.Add(eastSide);
				}

				var southNeighbour = new Tuple<int, int>(plot.Item1 + 1, plot.Item2);
				if (!region.Contains(southNeighbour) && !IsAlreadyContainedInMatchingSide(sides, CardinalDirection.S, plot.Item1, plot.Item2))
				{
					var southSide = new Side() { Direction = CardinalDirection.S };
					southSide.CellSharingSide.Add(plot);

					CompleteSouthSide(region, plot.Item1, plot.Item2, southSide);
					sides.Add(southSide);
				}

				var westNeighbour = new Tuple<int, int>(plot.Item1, plot.Item2 - 1);
				if (!region.Contains(westNeighbour) && !IsAlreadyContainedInMatchingSide(sides, CardinalDirection.W, plot.Item1, plot.Item2))
				{
					var westSide = new Side() { Direction = CardinalDirection.W };
					westSide.CellSharingSide.Add(plot);

					CompleteWestSide(region, plot.Item1, plot.Item2, westSide);
					sides.Add(westSide);
				}
			}

			return sides.Count;
		}

		private static bool IsAlreadyContainedInMatchingSide(List<Side> sides, CardinalDirection direction, int y, int x)
		{
			var allSidesWithSameCardinality = sides.Where(t => t.Direction == direction);
			foreach (Side side in allSidesWithSameCardinality)
			{
				if (side.CellSharingSide.Contains(new Tuple<int, int>(y, x)))
				{
					return true;
				}
			}

			return false;
		}

		private static void CompleteSideEastWest(List<Tuple<int, int>> region, CardinalDirection direction, int y, int x, Side side)
		{
			var west = new Tuple<int, int>(y, x - 1);
			if (region.Contains(west) && !side.CellSharingSide.Contains(west))
			{
				side.CellSharingSide.Add(west);
				CompleteSideEastWest(region, direction, west.Item1, west.Item2, side);
			}

			var east = new Tuple<int, int>(y, x + 1);
			if (region.Contains(east) && !side.CellSharingSide.Contains(east))
			{
				side.CellSharingSide.Add(east);
				CompleteSideEastWest(region, direction, east.Item1, east.Item2, side);
			}
		}

		private static void CompleteNorthSide(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			CompleteNorthSideGoingEast(region, y, x, side);
			CompleteNorthSideGoingWest(region, y, x, side);
		}

		private static void CompleteNorthSideGoingEast(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			var eastPlot = new Tuple<int, int>(y, x + 1);
			var northEastPlot = new Tuple<int, int>(y - 1, x + 1);
			if (region.Contains(eastPlot) && !region.Contains(northEastPlot) && !side.CellSharingSide.Contains(eastPlot))
			{
				side.CellSharingSide.Add(eastPlot);
				CompleteNorthSideGoingEast(region, eastPlot.Item1, eastPlot.Item2, side);
			}
		}

		private static void CompleteNorthSideGoingWest(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			var westPlot = new Tuple<int, int>(y, x - 1);
			var northWestPlot = new Tuple<int, int>(y - 1, x - 1);
			if (region.Contains(westPlot) && !region.Contains(northWestPlot) && !side.CellSharingSide.Contains(westPlot))
			{
				side.CellSharingSide.Add(westPlot);
				CompleteNorthSideGoingWest(region, westPlot.Item1, westPlot.Item2, side);
			}
		}

		private static void CompleteEastSide(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			CompleteEastSideGoingNorth(region, y, x, side);
			CompleteEastSideGoingSouth(region, y, x, side);
		}

		private static void CompleteEastSideGoingNorth(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			var northPlot = new Tuple<int, int>(y - 1, x);
			var northEastPlot = new Tuple<int, int>(y - 1, x + 1);
			if (region.Contains(northPlot) && !region.Contains(northEastPlot) && !side.CellSharingSide.Contains(northPlot))
			{
				side.CellSharingSide.Add(northPlot);
				CompleteEastSideGoingNorth(region, northPlot.Item1, northPlot.Item2, side);
			}
		}

		private static void CompleteEastSideGoingSouth(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			var southPlot = new Tuple<int, int>(y + 1, x);
			var southEastPlot = new Tuple<int, int>(y + 1, x + 1);
			if (region.Contains(southPlot) && !region.Contains(southEastPlot) && !side.CellSharingSide.Contains(southPlot))
			{
				side.CellSharingSide.Add(southPlot);
				CompleteEastSideGoingSouth(region, southPlot.Item1, southPlot.Item2, side);
			}
		}

		private static void CompleteSouthSide(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			CompleteSouthSideGoingEast(region, y, x, side);
			CompleteSouthSideGoingWest(region, y, x, side);
		}

		private static void CompleteSouthSideGoingEast(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			var eastPlot = new Tuple<int, int>(y, x + 1);
			var northEastPlot = new Tuple<int, int>(y + 1, x + 1);
			if (region.Contains(eastPlot) && !region.Contains(northEastPlot) && !side.CellSharingSide.Contains(eastPlot))
			{
				side.CellSharingSide.Add(eastPlot);
				CompleteSouthSideGoingEast(region, eastPlot.Item1, eastPlot.Item2, side);
			}
		}

		private static void CompleteSouthSideGoingWest(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			var westPlot = new Tuple<int, int>(y, x - 1);
			var southWestPlot = new Tuple<int, int>(y + 1, x - 1);
			if (region.Contains(westPlot) && !region.Contains(southWestPlot) && !side.CellSharingSide.Contains(westPlot))
			{
				side.CellSharingSide.Add(westPlot);
				CompleteSouthSideGoingWest(region, westPlot.Item1, westPlot.Item2, side);
			}
		}

		private static void CompleteWestSide(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			CompleteWestSideGoingNorth(region, y, x, side);
			CompleteWestSideGoingSouth(region, y, x, side);
		}

		private static void CompleteWestSideGoingNorth(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			var northPlot = new Tuple<int, int>(y - 1, x);
			var northWestPlot = new Tuple<int, int>(y - 1, x - 1);
			if (region.Contains(northPlot) && !region.Contains(northWestPlot) && !side.CellSharingSide.Contains(northPlot))
			{
				side.CellSharingSide.Add(northPlot);
				CompleteWestSideGoingNorth(region, northPlot.Item1, northPlot.Item2, side);
			}
		}

		private static void CompleteWestSideGoingSouth(List<Tuple<int, int>> region, int y, int x, Side side)
		{
			var southPlot = new Tuple<int, int>(y + 1, x);
			var southWestPlot = new Tuple<int, int>(y + 1, x - 1);
			if (region.Contains(southPlot) && !region.Contains(southWestPlot) && !side.CellSharingSide.Contains(southPlot))
			{
				side.CellSharingSide.Add(southPlot);
				CompleteWestSideGoingSouth(region, southPlot.Item1, southPlot.Item2, side);
			}
		}
	}
}